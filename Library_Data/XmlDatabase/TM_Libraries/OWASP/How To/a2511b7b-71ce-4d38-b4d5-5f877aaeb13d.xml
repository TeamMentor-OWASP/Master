<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="a2511b7b-71ce-4d38-b4d5-5f877aaeb13d" Author="" Category="Role Manager Settings" Priority="" Rule_Type="How To" Status="" Technology="ASP.NET 3.5" title="How to Use Role Manager in ASP.NET" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;Applies to&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Microsoft Windows Server 2003 operating system or later&amp;nbsp;operating system&lt;/li&gt;&lt;li&gt;Microsoft Windows XP Professional Service Pack 1 or later operating system &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Summary&lt;/h1&gt;&lt;p&gt;This How to shows you how to use the ASP.NET role manager. The role manager eases the task of managing roles and performing role-based authorization in your application. It shows how to configure the various role providers for use with your Web application, how to create new roles, how to add a user to a role, and how to use the role management API for roles-based authorization.&lt;/p&gt;&lt;h1&gt;Contents&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;div&gt;Objectives&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Overview&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Summary of Steps&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Step 1. Configure Your Role Store&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Step 2. Configure Your Role Provider in Web.config&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Step 3. Create and Assign Roles&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Step 4. Perform Role-Based Authorization&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Additional Considerations&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;Additional Resources&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Objectives&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Configure an ASP.NET Web application to use role management. &lt;/li&gt;&lt;li&gt;Learn how to configure the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt;, &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt;, and &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;Create and assign roles by using ASP.NET configuration tools, SQL scripts, and the role management APIs. &lt;/li&gt;&lt;li&gt;Perform role based authorization in an ASP.NET Web application. &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Overview&lt;/h1&gt;&lt;p&gt;ASP.NET&amp;nbsp;includes a role manager feature that includes a roles management API that allows you to create and delete roles and assign and remove users from roles. The role manager stores its data in an underlying data store that it accesses through an appropriate role provider for that data store.&lt;/p&gt;&lt;p&gt;The main benefits of using role manager are that it allows you to look up users' roles without writing and maintaining code. Additionally, the role providers offer a consistent way for you to check the role membership of your users, regardless of the underlying data store. Therefore, if your role store were to change tomorrow, you would only need to change the configuration settings to make your code work.&lt;/p&gt;&lt;p&gt;Supplied role providers include: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SqlRoleProvider.&lt;/strong&gt; This is used where the role store is kept in SQL Server. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;WindowsTokenRoleProvider.&lt;/strong&gt; This is a read-only provider that retrieves role information for a Windows user account based on the account's Windows security group membership. You cannot create, add to, or delete roles with this provider. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;AuthorizationStoreRoleProvider.&lt;/strong&gt; This is used if your application uses Authorization Manager (AzMan). It uses an AzMan policy store in an XML file, in Active Directory, or in Active Directory Application Mode (ADAM) as its role store. It is typically used in an intranet or extranet scenario where Windows authentication and Active Directory is used for authentication. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To perform role management, your ASP.NET application must be able to identify and authenticate its users in some way. For example, it might use Windows authentication or Forms authentication.&lt;/p&gt;&lt;p&gt;This How to shows you how to set up and configure a role store and a role provider and use role-based authorization in your ASP.NET applications. Additionally, it demonstrates some of the basic roles API calls available to work with roles programmatically.&lt;/p&gt;&lt;h1&gt;Summary of Steps&lt;/h1&gt;&lt;p&gt;To use the role manager in your application, perform the following steps: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Step 1. Configure your role store. &lt;/li&gt;&lt;li&gt;Step 2. Configure your role provider in Web.config. &lt;/li&gt;&lt;li&gt;Step 3. Create and assign roles. &lt;/li&gt;&lt;li&gt;Step 4. Perform role-based authorization. &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Step 1. Configure Your Role Store &lt;/h1&gt;&lt;p&gt;In this step, you prepare the role store used to maintain role details. The setup details vary according to the store and associated provider that you choose to use.&lt;/p&gt;&lt;h2&gt;Using SqlRoleProvider&lt;/h2&gt;&lt;p&gt;If you want to store roles in SQL Server, you use the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt;. By default, roles are stored in a database named Aspnetdb in a SQL Express database instance in the \app_data folder beneath your application's virtual directory root folder. You can also configure the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt; to use a local or remote instance of SQL Server.&lt;/p&gt;&lt;h3&gt;To use a SQL Express database role store in the Website \app_data folder&lt;/h3&gt;&lt;p&gt;You do not have to create or configure this database. The first time you perform an operation that uses the role management API, ASP.NET automatically creates a database named Aspnetdb, configures it, and sets appropriate permissions on it. &lt;/p&gt;&lt;p&gt;ASP.NET configures the SQL Express database with a database login for the default accounts used to run ASP.NET applications (Network Service on Windows Server 2003 or later&amp;nbsp;and ASPNET on Windows 2000) and grants them full access to the Aspnetdb database. &lt;/p&gt;&lt;p&gt;If you have configured ASP.NET to run using a custom service account, you must create a SQL login for that account, and add the login to the &lt;strong&gt;aspnet_Roles_FullAccess&lt;/strong&gt; role in the Aspnetdb database. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;To install the role management database in SQL Server&lt;/strong&gt; &lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to Windows using an account that has administration rights for your SQL Server instance. &lt;/li&gt;&lt;li&gt;Open a command prompt window and execute the following command to install the role management database. &lt;p&gt;&lt;strong&gt;Aspnet_regsql.exe&lt;/strong&gt;-&lt;strong&gt;E&lt;/strong&gt;-&lt;strong&gt;S&lt;/strong&gt; &lt;em&gt;sqlinstance&lt;/em&gt;-&lt;strong&gt;A r&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;Note that this program is located in the &lt;strong&gt;%windir%\Microsoft.NET\Framework\{version}&lt;/strong&gt; folder. &lt;/p&gt;&lt;p&gt;When you type the command, replace &lt;em&gt;version&lt;/em&gt; with the version of the .NET Framework that you are using and &lt;em&gt;sqlinstance&lt;/em&gt; with the name of the SQL Server instance you want to install the role management database in. &lt;/p&gt;&lt;p&gt;You will see the following output: &lt;/p&gt;&lt;div&gt;&lt;pre&gt;Start adding the following features:&lt;br&gt;Rolemanager&lt;br&gt;............&lt;br&gt;Finished.  &lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;For information about the switches for Aspnet_regsql.exe, type &lt;strong&gt;Aspnet_regsql.exe -?&lt;/strong&gt; at the command prompt.&lt;/blockquote&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;To grant permissions in the database&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You need to create a database login for your Web application's process account; by default, this is the Network Service account. If you have configured a custom account to run ASP.NET, you must grant permissions to that account. &lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;If you have configured your ASP.NET application to use impersonation, your ASP.NET application executes using the security context of the original caller. To access data in a SQL Server database, you must usually create a database login for the original caller and grant access to the required data.&lt;/blockquote&gt;&lt;blockquote&gt;However, the role management system accesses the Aspnetdb database by using the process identity regardless of whether your application uses impersonation. &lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;Open SQL Server Enterprise Manager, expand &lt;strong&gt;Security&lt;/strong&gt;, and then expand &lt;strong&gt;Logins&lt;/strong&gt; for the server hosting the role management database. Create a new login for your Web application's process account (for example, &lt;strong&gt;NT AUTHORITY/Network Service&lt;/strong&gt;). &lt;/li&gt;&lt;li&gt;Set the default database to &lt;strong&gt;Aspnetdb&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;Under the &lt;strong&gt;Databases&lt;/strong&gt; node in Enterprise Manager, expand the &lt;strong&gt;Aspnetdb&lt;/strong&gt; database entry, and then click &lt;strong&gt;Roles&lt;/strong&gt;. Right-click &lt;strong&gt;aspnet_Roles_FullAccess&lt;/strong&gt;, and then click &lt;strong&gt;Properties&lt;/strong&gt;. In the &lt;strong&gt;Database Role Properties&lt;/strong&gt; dialog box, click &lt;strong&gt;Add&lt;/strong&gt;, and then select the database login you created in the previous step to add the login to that role. &lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Aspnet_regsql.exe creates three database roles with differing levels of access to the role management database: &lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FullAccess&lt;/strong&gt; gives rights to create and delete roles, and add and remove users from those roles. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;BasicAccess&lt;/strong&gt; allows role membership checks for the current user only. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;ReportingAccess&lt;/strong&gt; allows a page to check which roles exist and which users belong to them. &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Using WindowsTokenRoleProvider&lt;/h2&gt;&lt;p&gt;You use the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; with ASP.NET applications that use Windows authentication. It is a read-only provider that retrieves role information for a Windows user based on Windows security groups. You cannot create, add to, or delete roles with this provider. Instead, you must use the Windows Computer Management or Active Directory Users and Computers administration tools.&lt;/p&gt;&lt;p&gt;The Windows security system acts as role store for this provider, so no additional configuration is required to set up the role store.&lt;/p&gt;&lt;h2&gt;Using AuthorizationStoreRoleProvider&lt;/h2&gt;&lt;p&gt;Use the &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt; to store roles data in an AzMan policy store in an XML file, in Active Directory, or ADAM. &lt;/p&gt;&lt;p&gt;AzMan is supported on Windows 2000 Server or later and on Windows XP Professional.&amp;nbsp; &lt;/p&gt;&lt;h1&gt;Step 2. Configure Your Role Provider in Web.config&lt;/h1&gt;&lt;p&gt;In this step, you configure the appropriate role provider in your application's Web.config file.&lt;/p&gt;&lt;h2&gt;Using SqlRoleProvider&lt;/h2&gt;&lt;p&gt;To use the role store in the default SQL Express instance in a database in your Web site's \app_dir folder, add the following configuration to your application's Web.config file.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;roleManager enabled="true" /&amp;gt;&lt;br&gt;&amp;lt;/system.web&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This configuration enables role management and causes your application to use the default provider named &lt;strong&gt;AspNetSqlRoleProvider&lt;/strong&gt; defined in the Machine.config file. This uses the local SQL Express instance.&lt;/p&gt;&lt;p&gt;To use a role store in SQL Server, add a connection string to point to your role database and add a role provider definition in the Web.config file, as shown here.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;configuration&amp;gt;&lt;br&gt;&amp;nbsp; &amp;lt;connectionStrings&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;add name="SqlRoleManagerConnection" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Data Source=sqlinstance;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Initial Catalog=aspnetdb;Integrated Security=SSPI;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/add&amp;gt;&lt;br&gt;&amp;nbsp; &amp;lt;/connectionStrings&amp;gt;&lt;br&gt;&amp;lt;/configuration&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&amp;lt;roleManager enabled="true" defaultProvider="SqlRoleManager"&amp;gt;&lt;br&gt;&amp;nbsp; &amp;lt;providers&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;add name="SqlRoleManager" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Web.Security.SqlRoleProvider"&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName="SqlRoleManagerConnection"&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName="MyApplication" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;lt;/providers&amp;gt;&lt;br&gt;&amp;lt;/roleManager&amp;gt;&lt;/pre&gt;&lt;h2&gt;Using WindowsTokenRoleProvider&lt;/h2&gt;&lt;p&gt;The Windows security system acts as role store for this provider, and Windows groups represent roles. You can use this provider when you use Windows authentication. To do this, add the following configuration to your application's Web.config file.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;authentication mode="Windows" /&amp;gt;&lt;br&gt;&amp;lt;roleManager enabled="true" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="AspNetWindowsTokenRoleProvider" /&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This configuration enables role management and uses the role provider named &lt;strong&gt;AspNetWindowsTokenRoleProvider&lt;/strong&gt;, which is defined in the Machine.config file.&lt;/p&gt;&lt;h2&gt;Using AuthorizationStoreRoleProvider&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt; is used to store roles data in an AzMan policy store in an XML file, in Active Directory, or in ADAM. To configure this provider, add a connection string to point to the relevant policy store and then add a role provider definition in the Web.config file.&lt;/p&gt;&lt;p&gt;The following connection string refers to an XML-based policy store contained in a file named Azmanstore.xml.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;configuration&amp;gt; &lt;br&gt;&amp;nbsp; &amp;lt;connectionStrings&amp;gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;add name="AzManPolicyStoreConnectionString" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="msxml://c:/RolesData/azmanstore.xml" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;lt;/connectionStrings&amp;gt; &lt;br&gt;&amp;lt;/configuration&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following connection string refers to an ADAM-based policy store.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;configuration&amp;gt; &lt;br&gt;&amp;nbsp; &amp;lt;connectionStrings&amp;gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;add name="AzManPolicyStoreConnectionString" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString= "msldap://servername:port/CN=AzManADAMStore,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OU=SecNetPartition,O=SecNet,C=US"/&amp;gt;&lt;br&gt;&amp;nbsp; &amp;lt;/connectionStrings&amp;gt; &lt;br&gt;&amp;lt;/configuration&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following configuration shows how to enable role management and use the provider named &lt;strong&gt;RoleManagerAzManADAMProvider&lt;/strong&gt;. This uses the connection string shown earlier to connect to an ADAM policy store.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;roleManager &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; enabled="true" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cacheRolesInCookie="true" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="RoleManagerAzManADAMProvider"&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieName=".ASPXROLES" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookiePath="/" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieTimeout="30" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieRequireSSL="false" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieSlidingExpiration="true"&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; createPersistentCookie="false" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieProtection="All"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;providers&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;add name="RoleManagerAzManADAMProvider"&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Web.Security.AuthorizationStoreRoleProvider, System.Web,&lt;br&gt;     Version=3.5.0.0, Culture=neutral, publicKeyToken=b03f5f7f11d50a3a"&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName="AzManPolicyStoreConnectionString" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName="AzManDemo"/&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/providers&amp;gt;&lt;br&gt;&amp;lt;/roleManager&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;h1&gt;Step 3. Create and Assign Roles&lt;/h1&gt;&lt;p&gt;In this step, you create roles for your application and assign users to those roles. There are several methods you can use to create and assign roles. Using them depends on how your application authenticates its users and which role provider it uses. The various methods for creating and assigning users to roles include: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;At development time, you can use the ASP.NET configuration tool. &lt;/li&gt;&lt;li&gt;If you are using the &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;, you can use the AzMan administrator Microsoft Management Console (MMC) snap-in. &lt;/li&gt;&lt;li&gt;You can create roles programmatically by using either the role management APIs or, if you are using the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt;, by executing SQL scripts to add them to the database directly. &lt;/li&gt;&lt;li&gt;If you are using the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt;, you use the Windows Computer Management tool or Active Directory Users and Computers to create Windows groups which are used as roles. &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Using the ASP.NET Web Site Configuration Tool&lt;/h2&gt;&lt;p&gt;You can use the ASP.NET Web Site Configuration tool from Visual Studio .NET at development time if your application uses Forms authentication and you have configured your application to use the ASP.NET membership feature. If your application uses Windows authentication, you cannot use this tool and you must use either the Roles API or the AzMan administrator MMC snap-in as described in the next section. &lt;/p&gt;&lt;h3&gt;To assign users to roles by using the ASP.NET Web Site Configuration tool &lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Create roles by using the ASP.NET configuration tool by performing the following steps: &lt;ol&gt;&lt;li&gt;Start Visual Studio. &lt;/li&gt;&lt;li&gt;On the &lt;strong&gt;Website&lt;/strong&gt; menu, click &lt;strong&gt;ASP.NET Configuration&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;On the &lt;strong&gt;Home&lt;/strong&gt; tab, click &lt;strong&gt;Security&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;Create or&lt;/strong&gt; &lt;strong&gt;Manage Roles&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;Use the form to add your application roles. &lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Assign users to roles as follows: &lt;ol&gt;&lt;li&gt;In Visual Studio .NET, click &lt;strong&gt;ASP.NET Configuration &lt;/strong&gt;on the &lt;strong&gt;Website&lt;/strong&gt; menu. &lt;/li&gt;&lt;li&gt;On the &lt;strong&gt;Home&lt;/strong&gt; tab, click &lt;strong&gt;Security&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;Create or&lt;/strong&gt; &lt;strong&gt;Manage Roles&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;In the &lt;strong&gt;Add/Remove Users&lt;/strong&gt; column, click &lt;strong&gt;Manage&lt;/strong&gt; for a role you have created. This opens a form where you can add or remove users from the role. &lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Using the AzMan Administrator MMC Snap-In&lt;/h2&gt;&lt;p&gt;This tool is provided for applications that use an AzMan store to manage its users and roles. It is particularly convenient for applications using Windows authentication that cannot use the ASP.NET configuration tool to assign users to roles. &lt;/p&gt;&lt;h2&gt;Using SQL Scripts&lt;/h2&gt;&lt;p&gt;If you have suitable permissions on the role management database, you can run a SQL script to call the various stored procedures provided with the Aspnetdb database. For example, the following script creates a new role in an application and adds a user to it.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;EXEC aspnet_Roles_CreateRole 'ThisApplication', 'NewRole'&lt;br&gt;EXEC aspnet_UsersInRoles_AddUsersToRoles 'ThisApplication', 'ThisUser', 'NewRole', 8  &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are 19 role-managing stored procedures created inside the role management database. Most of these stored procedures have purposes analogous to calls in the role management API. &lt;/p&gt;&lt;h2&gt;Using the Role Management APIs&lt;/h2&gt;&lt;p&gt;You can assign users to roles or remove users from roles by using methods of the &lt;strong&gt;System.Web.Security.Roles&lt;/strong&gt; class. You can also check for the user's role membership and authorize as appropriate.&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Because the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; is read-only, it supports only the &lt;strong&gt;IsUserInRole&lt;/strong&gt; and &lt;strong&gt;GetRolesForUser &lt;/strong&gt;methods.&lt;strong&gt; &lt;/strong&gt;&lt;/blockquote&gt;&lt;p&gt;The following code shows how to create new roles.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;using System.Web.Security;&lt;/pre&gt;&lt;pre&gt;if (!Roles.RoleExists("TestRole"))&lt;br&gt;{&lt;br&gt;&amp;nbsp; Roles.CreateRole("TestRole");&lt;br&gt;}  &lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Role names are not case sensitive. If you attempt to create the same role twice, an exception is thrown.&lt;/blockquote&gt;&lt;p&gt;The following code shows how to add uses to roles.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;// Example 1 - Add one user to one role&lt;br&gt;Roles.AddUserToRole("TestOne", "ExampleRole1");&lt;/pre&gt;&lt;pre&gt;// Example 2 - Add one user to several roles&lt;br&gt;Roles.AddUserToRoles("TestTwo", &lt;br&gt;&amp;nbsp; new string[] { "ExampleRole1", "ExampleRole2" });&lt;/pre&gt;&lt;pre&gt;// Example 3 - Add several users to one roles&lt;br&gt;Roles.AddUsersToRole(&lt;br&gt;&amp;nbsp; new string[] { "TestTwo", "TestThree" }, "ExampleRole3");&lt;/pre&gt;&lt;pre&gt;// Example 4 - Add several users to several roles&lt;br&gt;Roles.AddUsersToRoles(&lt;br&gt;&amp;nbsp; new string[] { "TestThree", "TestFour" }, &lt;br&gt;&amp;nbsp; new string[] { "ExampleRole4" }); &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following code shows how to remove users from roles.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;// Example 1 - Add one user to one role&lt;br&gt;Roles.RemoveUserFromRole("TestOne", "ExampleRole1");&lt;/pre&gt;&lt;pre&gt;// Example 2 - Add one user to several roles&lt;br&gt;Roles.RemoveUserFromRoles("TestTwo", &lt;br&gt;&amp;nbsp; new string[] { "ExampleRole1", "ExampleRole2" });&lt;/pre&gt;&lt;pre&gt;// Example 3 - Add several users to one roles&lt;br&gt;Roles.RemoveUsersFromRole(&lt;br&gt;&amp;nbsp; new string[] { "TestTwo", "TestThree" }, "ExampleRole3");&lt;/pre&gt;&lt;pre&gt;// Example 4 - Add several users to several roles&lt;br&gt;Roles.RemoveUsersFromRoles(&lt;br&gt;&amp;nbsp; new string[] { "TestThree", "TestFour" }, &lt;br&gt;&amp;nbsp; new string[] { "ExampleRole4" }); &lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Both the &lt;strong&gt;AddUser&lt;/strong&gt; and &lt;strong&gt;RemoveUser&lt;/strong&gt; methods throw a &lt;strong&gt;TargetInvocationException&lt;/strong&gt; if you specify a role that does not exist or if you specify an invalid Windows user account name. The inner exception gives the reason for the failure. None of the methods mentioned earlier can be used against a &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt;.&lt;/blockquote&gt;&lt;h1&gt;Step 4. Perform Role-Based Authorization &lt;/h1&gt;&lt;p&gt;In this step, you create test applications that use role management. This step provides two samples: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;The first sample uses the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt; or &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;, in which the application assigns a role to a user, removes a role from a user, and tests for role membership. &lt;/li&gt;&lt;li&gt;The second sample uses the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; to check which Windows groups (roles) the current user is a member of. The &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; supports only the&lt;strong&gt; IsUserInRole &lt;/strong&gt;and &lt;strong&gt;GetRolesForUser &lt;/strong&gt;methods of the role management API, and it does not allow you to create, assign to, or remove users from Windows groups. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Both of these sample applications use Integrated Windows authentication in Microsoft Internet Information Services (IIS) to authenticate callers. This is a requirement when using the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt;, but if you are using the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt; or &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;, you could use alternative authentication such as forms authentication.&lt;/p&gt;&lt;h2&gt;Sample: Using SqlRoleProvider or AuthorizationStoreRoleProvider&lt;/h2&gt;&lt;p&gt;This sample uses the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt; or &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;.&lt;/p&gt;&lt;h3&gt;To test role management with SqlRoleProvider or AuthorizationStoreRoleProvider &lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Use Visual Studio to create a Web site, add a Web.config file, and configure the role store and &lt;strong&gt;SqlRoleProvider&lt;/strong&gt; or &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt; as described in steps 1 and 2 of this How to. &lt;/li&gt;&lt;li&gt;Using the Internet Information Services MMC snap-in, edit the properties of the Web site. Edit the &lt;strong&gt;Anonymous access and authentication control&lt;/strong&gt; on the &lt;strong&gt;Directory&lt;/strong&gt; &lt;strong&gt;security&lt;/strong&gt; tab. Clear the &lt;strong&gt;Anonymous access&lt;/strong&gt; check box and select the &lt;strong&gt;Integrated Windows authentication&lt;/strong&gt; check box. &lt;/li&gt;&lt;li&gt;In the Web.config file, enable Windows authentication. &lt;div&gt;&lt;pre&gt;&amp;lt;system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;authentication mode="Windows"/&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;br&gt;&amp;lt;/system.web&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Add the following code to the Default.aspx file. &lt;div&gt;&lt;pre&gt;&amp;lt;%@ Page Language="C#" %&amp;gt;&lt;br&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "&lt;a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&lt;/a&gt;"&amp;gt;&lt;br&gt;&amp;lt;script runat="server"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!Roles.RoleExists("TestRole"))&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Roles.CreateRole("TestRole");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ShowRoleMembership();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private void ShowRoleMembership()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Roles.IsUserInRole("TestRole"))&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Label1.Text = User.Identity.Name + " is in role TestRole";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Label1.Text = User.Identity.Name + " is NOT in role TestRole";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Button1_Click(object sender, EventArgs e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Roles.AddUserToRole(User.Identity.Name, "TestRole");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ShowRoleMembership();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Button2_Click(object sender, EventArgs e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Roles.RemoveUserFromRole(User.Identity.Name, "TestRole");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ShowRoleMembership();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;lt;/script&amp;gt;&lt;br&gt;&amp;lt;html&amp;nbsp; &amp;gt;&lt;br&gt;&amp;lt;head runat="server"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;Untitled Page&amp;lt;/title&amp;gt;&lt;br&gt;&amp;lt;/head&amp;gt;&lt;br&gt;&amp;lt;body&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;form id="form1" runat="server"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;asp:Button ID="Button1" runat="server" Text="Add to role" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="Button1_Click" /&amp;gt;&amp;lt;br /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;br /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;asp:Button ID="Button2" runat="server" Text="Remove from role" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="Button2_Click" /&amp;gt;&amp;lt;br /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;br /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;asp:Label ID="Label1" runat="server" /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/form&amp;gt;&lt;br&gt;&amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html  &lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Run the application. Note the following features about this application: &lt;ol&gt;&lt;li&gt;When you browse to the application, the code in the &lt;strong&gt;Page_Load&lt;/strong&gt; event handler creates the role &lt;strong&gt;TestRole&lt;/strong&gt; if it does not already exist. &lt;ul&gt;&lt;li&gt;The text of &lt;strong&gt;Label1&lt;/strong&gt; shows whether the current authenticated user is a member of the &lt;strong&gt;TestRole&lt;/strong&gt; role. &lt;/li&gt;&lt;li&gt;When you click the &lt;strong&gt;Add to role&lt;/strong&gt; button, the code in the &lt;strong&gt;Button1_Click&lt;/strong&gt; event handler uses the role management API to add the current authenticated user to the &lt;strong&gt;TestRole&lt;/strong&gt; role. &lt;/li&gt;&lt;li&gt;If you click the &lt;strong&gt;Add to role&lt;/strong&gt; button again before clicking the &lt;strong&gt;Remove from role&lt;/strong&gt; button, the call to &lt;strong&gt;Roles.AddUserToRole&lt;/strong&gt; throws an exception because the user is already in the role &lt;strong&gt;TestUser&lt;/strong&gt;. You must code for this condition in your applications. &lt;/li&gt;&lt;li&gt;When you click the &lt;strong&gt;Remove from role&lt;/strong&gt; button, the current authenticated user is removed from the role &lt;strong&gt;TestRole&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;If you click the &lt;strong&gt;Remove from role&lt;/strong&gt; button again before clicking the &lt;strong&gt;Add to role&lt;/strong&gt; button, the call to &lt;strong&gt;Roles.RemoveUserFromRole&lt;/strong&gt; throws an exception because the user is already not in the role &lt;strong&gt;TestUser&lt;/strong&gt; and cannot be removed twice. You must code for this condition in your applications. &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;To control access to pages and folders using roles&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A typical use for roles is to establish rules that allow or deny access to pages or folders. You can set up such access rules in the &amp;lt;&lt;strong&gt;authorization&lt;/strong&gt;&amp;gt; section of the Web.config file. The following example allows users in the role of members to view pages in the folder named &lt;strong&gt;memberPages&lt;/strong&gt; and denies access to anyone else.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;configuration&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;lt;location path="memberPages"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;authorization&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;allow roles="Manager" /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;deny users="*" /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/authorization&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/location&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;lt;!-- other configuration settings here --&amp;gt;&lt;br&gt;&amp;lt;configuration&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Sample: Using WindowsTokenRoleProvider&lt;/h2&gt;&lt;p&gt;This sample uses the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt;.&lt;/p&gt;&lt;h3&gt;To test role management with WindowsTokenRoleProvider &lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Use Visual Studio&amp;nbsp;to create a Web site, add a Web.config file, and configure the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; as described in step 2 of this How to. &lt;/li&gt;&lt;li&gt;Using the Internet Information Services MMC snap-in, edit the properties of the Web site. Edit the &lt;strong&gt;Anonymous access and authentication control&lt;/strong&gt; on the &lt;strong&gt;Directory security&lt;/strong&gt; tab. Clear the &lt;strong&gt;Anonymous access&lt;/strong&gt; check box and select the &lt;strong&gt;Integrated Windows Authentication&lt;/strong&gt; check box. &lt;/li&gt;&lt;li&gt;In the Web.config file, enable Windows authentication. &lt;div&gt;&lt;pre&gt;&amp;lt;system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;authentication mode="Windows"/&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;br&gt;&amp;lt;/system.web&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Add the following code to Default.aspx. &lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre&gt;&amp;lt;%@ Page Language="C#" %&amp;gt;&lt;br&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "&lt;a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&lt;/a&gt;"&amp;gt;&lt;br&gt;&amp;lt;script runat="server"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string[] members = Roles.GetRolesForUser();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach (string role in members)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Label1.Text += role + "&amp;lt;br /&amp;gt;";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; } &lt;br&gt;&amp;lt;/script&amp;gt;&lt;br&gt;&amp;lt;html&amp;nbsp; &amp;gt;&lt;br&gt;&amp;lt;head runat="server"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;Untitled Page&amp;lt;/title&amp;gt;&lt;br&gt;&amp;lt;/head&amp;gt;&lt;br&gt;&amp;lt;body&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;form id="form1" runat="server"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;asp:Label ID="Label1" runat="server" /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/form&amp;gt;&lt;br&gt;&amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Run the application. A list of roles that correspond to the Windows groups that the authenticated user is a member of is displayed. Note the following features about this application: &lt;ol&gt;&lt;li&gt;Because &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; is read-only, you cannot create, assign to, or remove users from roles. The &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt; supports only the &lt;strong&gt;IsUserInRole &lt;/strong&gt;and &lt;strong&gt;GetRolesForUser&lt;/strong&gt; methods of the role management API. &lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;The text of &lt;strong&gt;Label1&lt;/strong&gt; shows which Windows groups the currently logged on user is a member of. &lt;/li&gt;&lt;li&gt;The &lt;strong&gt;WindowsPrincipal &lt;/strong&gt;class supports an override of the &lt;strong&gt;IsInRole&lt;/strong&gt; method that accepts a &lt;strong&gt;WindowsBuiltinRole&lt;/strong&gt; enumeration. This method allows you to test against membership of common Windows groups. The &lt;strong&gt;WindowsBuiltInRole&lt;/strong&gt; enumeration contains members representing common groups such as Administrators, Guest, PowerUser, and User as shown here. &lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;pre&gt;WindowsPrincipal User = new &lt;br&gt;&amp;nbsp; WindowsPrincipal((WindowsIdentity)HttpContext.Current.User.Identity);&lt;br&gt;if (User.IsInRole(WindowsBuiltInRole.PowerUser))&lt;br&gt;{&lt;br&gt;&amp;nbsp; ...&lt;br&gt;}  &lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;To control access to pages and folders using built-in roles with the WindowsTokenRoleProvider&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You can control access to pages or folders to members of one of the built-in Windows groups by specifying the role in the format &lt;strong&gt;BUILTIN\&lt;em&gt;groupName&lt;/em&gt;&lt;/strong&gt;. The following example allows users in the built-in administrators group to view pages in the folder named memberPages and denies access to anyone else.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;configuration&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;lt;location path="memberPages"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;authorization&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;allow roles="BUILTIN\Administrators" /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;deny users="*" /&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/authorization&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/system.web&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/location&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;lt;!-- other configuration settings here --&amp;gt;&lt;br&gt;&amp;lt;/configuration  &lt;/pre&gt;&lt;/div&gt;&lt;h1&gt;Additional Considerations&lt;/h1&gt;&lt;p&gt;If a user's browser accepts cookies, you can store role information for that user in a cookie on the user's computer. On each page request, ASP.NET reads the role information for that user from the cookie. This can improve application performance by reducing the amount of communication required with the roles data store. &lt;/p&gt;&lt;p&gt;To configure and enable role caching, set &lt;strong&gt;cacheRolesInCookie = true&lt;/strong&gt; as shown here.&lt;/p&gt;&lt;div&gt;&lt;pre&gt;&amp;lt;roleManager enabled="true" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cacheRolesInCookie="true" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieName=".ASPXROLES"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieTimeout="30" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookiePath="/" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieRequireSSL="false" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieSlidingExpiration="true"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieProtection="All" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="AspNetSqlRoleProvider"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; createPersistentCookie="false" &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxCachedResults="25"/&amp;gt;  &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the role information for a user is too long to store in a cookie, ASP.NET stores only the most recently used role information in the cookie, and then it looks up additional role information in the data source as required. &lt;/p&gt;&lt;p&gt;To secure the role cookie: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set &lt;strong&gt;cookieRequireSSL&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt; to ensure the cookie is only used over an SSL protected channel. &lt;/li&gt;&lt;li&gt;Set &lt;strong&gt;createPersistentCookie&lt;/strong&gt; to &lt;strong&gt;false&lt;/strong&gt; to prevent the cookie from being stored on the client computer, in which case the cookie is only used to protect the current session. &lt;/li&gt;&lt;li&gt;Set &lt;strong&gt;cookieTimeout&lt;/strong&gt; to the number of minutes for which the cookie is valid.&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance.&lt;/p&gt;</content>
</guidanceItem>