<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="c929a261-7456-428c-b68f-cccc509239bc" Author="" Category="Input and Data Validation" Priority="" Rule_Type="How To" Status="" Technology=" Any" title="How to Test for XML Injection Bugs" Topic="Security" phase="Test" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;Applies To:&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Web services that use XML communication protocols written in web languages such as ASP, PHP, Java, and similar languages. &lt;/li&gt;&lt;li&gt;Web services that use SOAP communication.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&amp;nbsp;&lt;/p&gt;&lt;h1&gt;Summary&lt;/h1&gt;&lt;p&gt;XML stands for Extensible Markup Language.&amp;nbsp; Similar to HTML, it utilizes tags to store structured data.&amp;nbsp; However, XML is extensible as it allows users to define their own elements in user defined tags.&lt;/p&gt;&lt;p&gt;In web software, the two most noticeable uses for XML are: &lt;/p&gt;&lt;ol&gt;&lt;li&gt;Store structured data as an alternative to a database. &lt;/li&gt;&lt;li&gt;Provide a transaction protocol for business-to-business and business-to-client communications (such as SOAP.)&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;em&gt;Store structured data as an alternative to a database&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;A server stores user names, passwords, and emails in the &lt;strong&gt;&lt;em&gt;user&lt;/em&gt;&lt;/strong&gt; element.&amp;nbsp; It uses a web form to collect user data:&lt;/p&gt;&lt;p&gt;&lt;img src="X:\Trash\GE\clip_image001.png"&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A user enters the following data and clicks on the &lt;em&gt;Create User&lt;/em&gt; button:&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;Username: JohnyC&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;Password: qwerty&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;E-mail: johnyc@examplesite.com&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;The client sends this URL to the server application:&amp;nbsp;&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;http://www.examplesite.com/GetProfile.php?username=JohnyC&amp;amp;password=qwerty &amp;amp;email=JohnyC@examplesite.com&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;Once the server receives the URL it creates a &lt;strong&gt;&lt;em&gt;user&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;XML&lt;/em&gt; &lt;em&gt;element&lt;/em&gt; &lt;em&gt;node:&lt;/em&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;user&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;username&amp;gt;JohnyC&amp;lt;/username&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password&amp;gt;qwerty&amp;lt;/password&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;userid&amp;gt;111&amp;lt;userid/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;mail&amp;gt;JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;&lt;/pre&gt;&lt;h3&gt;&lt;em&gt;Provide a transaction protocol for business-to-business and business-to-client communications (such as SOAP)&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;The second and most used XML benefit is to integrate web services.&amp;nbsp; SOAP is the communication protocol for XML web services.&amp;nbsp; Before XML, systems had to implement Remote Procedure Calls (RPC) to integrate cross platform services on the web.&amp;nbsp; At that time COBRA or DCE were mostly used to achieve integration, but they were too complex.&amp;nbsp;&amp;nbsp; SOAP defined a standard XML communication protocol that was adopted because of its simplicity.&amp;nbsp; As Microsoft released SOAP, they also released a toolkit that translated COM to SOAP, as well as one to translate Java Functions to SOAP.&amp;nbsp;&amp;nbsp; &lt;/p&gt;&lt;p&gt;The following code shows an XML-based SOAP client that invokes the &lt;strong&gt;sayHello &lt;/strong&gt;method on a SOAP server&lt;a href="about:blank#_edn1" name="_ednref1"&gt;[i]&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;Dim x, h&lt;/pre&gt;&lt;pre&gt;Set x = CreateObject("MSXML2.DOMDocument")&lt;/pre&gt;&lt;pre&gt;x.loadXML "&amp;lt;s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/' &lt;/pre&gt;&lt;pre&gt;&amp;nbsp; xmlns:xsi='http://www.w3.org/1999/XMLSchema-instance' &lt;/pre&gt;&lt;pre&gt;&amp;nbsp; xmlns:xsd='http://www.w3.org/1999/XMLSchema'&amp;gt;&amp;lt;s:Body&amp;gt;&amp;lt;m:sayHello &lt;/pre&gt;&lt;pre&gt;&amp;nbsp; xmlns:m='urn:Example1'&amp;gt;&amp;lt;name xsi:type='xsd:string'&amp;gt;James&amp;lt;/name&amp;gt;&amp;lt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; /m:sayHello&amp;gt;&amp;lt;/s:Body&amp;gt;&amp;lt;/s:Envelope&amp;gt;"&lt;/pre&gt;&lt;pre&gt;msgbox x.xml, , "Input SOAP Message"&lt;/pre&gt;&lt;pre&gt;Set h = CreateObject("Microsoft.XMLHTTP")&lt;/pre&gt;&lt;pre&gt;h.open "POST", "http://localhost:8080"&lt;/pre&gt;&lt;pre&gt;h.send (x)&lt;/pre&gt;&lt;pre&gt;while h.readyState &amp;lt;&amp;gt; 4&lt;/pre&gt;&lt;pre&gt;wend&lt;/pre&gt;&lt;pre&gt;msgbox h.responseText,,"Output SOAP Message"&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;p&gt;For more information about XML Web Services, refer to theMSDN article on the topic&lt;a href="about:blank#_edn2" name="_ednref2"&gt;[ii]&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;em&gt;XML Injection Bugs&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;XML injection means to maliciously feed crafted data to a XML-based web service in order to execute an attack.&amp;nbsp; An XML injection attack varies from adding extra elements in an XML store to tamper with sensitive information to modifying XML store tags to execute cross-site scripting code in a target browser.&lt;/p&gt;&lt;p&gt;The following steps are needed to test for XML Injection:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Understand XML Injection attack scenarios. &lt;/li&gt;&lt;li&gt;Identify high risk components. &lt;/li&gt;&lt;li&gt;Start testing and exploring. &lt;/li&gt;&lt;li&gt;Tune test cases.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Important: &lt;/strong&gt;&amp;nbsp;&amp;nbsp;It is necessary to differentiate XML injection with &lt;strong&gt;&lt;em&gt;XPATH&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;XQUERY &lt;/em&gt;&lt;/strong&gt;bugs.&amp;nbsp; They are similar as they both relate to XML, but the logic involved is fundamentally different and will be discussed in individual articles.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;h1&gt;Step 1:&amp;nbsp; Understand XML Injection attack scenarios&lt;/h1&gt;&lt;p&gt;During the first step, you need to understand how an XML injection attack works both in storage and communication.&amp;nbsp; The following two scenarios elaborate on XML injection attacks:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Injecting an extra tag to a XML data store. &lt;/li&gt;&lt;li&gt;Executing cross-site scripting attacks by manipulating the CDATA tag.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Scenario 1:&amp;nbsp; Injecting an extra tag to a XML data store&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;A bank site exposes a simple web page to create checking accounts. &amp;nbsp;It takes data from a web form like the one above and builds a URL like this one:&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;amp;password=qwerty&amp;amp;email=JohnyC@examplesite.com&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;The bank uses the data in the URL to construct the following XML in its data store:&lt;/p&gt;&lt;pre&gt;&amp;lt;user&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;username&amp;gt;JohnyC&amp;lt;/username&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password&amp;gt;qwerty&amp;lt;/password&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;userid&amp;gt;111&amp;lt;userid/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;mail&amp;gt;JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;account type=”checking”&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;created&amp;gt;02-21-2008&amp;lt;/created&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;number&amp;gt;1249109&amp;lt;/number&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;balance&amp;gt;1201&amp;lt;/balance&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/account&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&lt;/pre&gt;&lt;p&gt;The bank doesn’t provide a web interface to create saving accounts.&amp;nbsp; In order to open a saving account, clients need to go to the bank and provide additional information.&amp;nbsp; The bank exposes a security vulnerability that allows the attacker to feed malicious data in the web form.&amp;nbsp; The attacker submits the following URL request:&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;amp;password=qwerty&amp;amp;email=JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&amp;lt;account type="savings"&amp;gt;&amp;lt;created&amp;gt;03-02-2008&amp;lt;/created&amp;gt;&amp;lt;number&amp;gt;12345678&amp;lt;/number&amp;gt;&amp;lt;balance&amp;gt;1000000&amp;lt;/balance&amp;gt;&amp;lt;/account&amp;gt;&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;When the bank receives this request it doesn’t check for extra tags and builds the following element in its data store:&lt;/p&gt;&lt;pre&gt;&amp;lt;user&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;username&amp;gt;JohnyC&amp;lt;/username&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password&amp;gt;qwerty&amp;lt;/password&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;userid&amp;gt;111&amp;lt;userid/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;mail&amp;gt;JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;account type="savings"&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;created&amp;gt;03-02-2008&amp;lt;/created&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;number&amp;gt;12345678&amp;lt;/number&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;balance&amp;gt;1000000&amp;lt;/balance&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/account&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;account type=”checking”&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;created&amp;gt;02-21-2008&amp;lt;/created&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;number&amp;gt;1249109&amp;lt;/number&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;balance&amp;gt;1201&amp;lt;/balance&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/account&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The bug in the bank web application here allows the attacker to remotely create a savings account with a $1000000 balance.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Scenario 2:&amp;nbsp; Executing cross-site scripting attacks by manipulating the CDATA tag &lt;/em&gt;&lt;/h2&gt;&lt;p&gt;XML uses the CDATA tag to escape blocks of text that would be otherwise recognized as markup.&amp;nbsp; All data enclosed in between the tags &lt;strong&gt;"&amp;lt;![CDATA[" &lt;/strong&gt;and &lt;strong&gt;"]]&amp;gt;" &lt;/strong&gt;will not be parsed as markup.&amp;nbsp; &lt;/p&gt;&lt;p&gt;A vulnerable server uses a file named scenarios.xml to store the title and the data for each scenario:&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version="1.0" encoding="ISO-8859-1"?&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;scenarios&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;lt;scenario&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;XSS scenario&amp;lt;/title&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;data&amp;gt;&amp;lt;![CDATA[this is not to be parsed &amp;lt;!-- as XML '"&amp;gt;&amp;lt;]]&amp;gt;&amp;lt;/data&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/scenario&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;etc…&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/scenarios&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The application blindly builds a page (scenarios.php) from the XML file using the following code and then sends the page back to the client:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;? php&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; $objDOM = new DOMDocument(); &lt;/pre&gt;&lt;pre&gt;&amp;nbsp; $objDOM-&amp;gt;load("scenarios.xml"); &lt;/pre&gt;&lt;pre&gt;&amp;nbsp; $scenario = $objDOM-&amp;gt;getElementsByTagName("scenario");&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp; foreach( $scenario as $value )&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; {&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $title&amp;nbsp; = $value-&amp;gt;getElementsByTagName("title")-&amp;gt;item(0)-&amp;gt;nodeValue;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $data =&amp;nbsp;&amp;nbsp; $value-&amp;gt;getElementsByTagName("data")-&amp;gt;item(0)-&amp;gt;nodeValue;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; echo "$title:&amp;lt;br&amp;gt;$data&amp;lt;br&amp;gt;";&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; }&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; &lt;/pre&gt;&lt;pre&gt;?&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The scenario above will generate the following output:&lt;/p&gt;&lt;pre&gt;XSS scenario:&lt;br&gt;this is not be parsed as XML '"&amp;gt;&amp;lt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp; &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Now the attacker gets control of scenarios.xml and modifies the data tag to look like this:&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;scenario&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;XSS scenario&amp;lt;/title&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;data&amp;gt;&amp;lt;![CDATA[&amp;lt;script&amp;gt;alert('XSS')&amp;lt;/script&amp;gt;]]&amp;gt;&amp;lt;/data&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/scenario&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This will result in the vulnerable application building a page similar to the one below and sending it to the client:&lt;/p&gt;&lt;pre&gt;&amp;lt;html&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;XSS scenario:&lt;/pre&gt;&lt;pre&gt;&amp;lt;script&amp;gt;alert('XSS')&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;That finally results in a cross-site scripting attack because the server doesn’t validate the XML output before sending it back as HTML to the client.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h1&gt;Step 2:&amp;nbsp; Identify high risk components&lt;/h1&gt;&lt;p&gt;The next steps for XML Injection testing are to list all of the places where code builds XML statements from user supplied input; and to understand how and where our application manipulates statements, and how it uses them to modify its data store or to invoke XML web methods.&amp;nbsp; The most common are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Profile-related web pages. &lt;/li&gt;&lt;li&gt;E-Commerce or financial account-related pages. &lt;/li&gt;&lt;li&gt;XML web service interaction methods. &lt;/li&gt;&lt;li&gt;XML-based system-level clients. &lt;/li&gt;&lt;li&gt;Systems that read from XML backend and blindly construct responses to Internet clients.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Identify all high risk components &lt;/em&gt;&lt;/h2&gt;&lt;p&gt;This subtask consists of indentifying the coding errors that lead to XML injection bugs.&amp;nbsp; XML injection bugs exist for two main reasons.&amp;nbsp; First, when a server-side application directly utilizes user-supplied strings that arrive over the Internet to add into their XML data store or perform other XML-related tasks.&amp;nbsp; The application doesn’t do any sort of data validation on the strings, and therefore allows for injection of XML tags.&amp;nbsp; In the second case, an application is vulnerable if it reads from an XML store and blindly constructs an HTML page to send back to the client.&lt;/p&gt;&lt;p&gt;During this subtask, you need to go through all web pages in the application under test and look for any XML interaction.&amp;nbsp; Any page or method that uses XML to transmit data must be listed as a high risk component.&amp;nbsp;&amp;nbsp; Following are some common examples of what you need to look for when reviewing code for XML injection bugs.&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Identify the usage of XML parsers&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;Server-side applications can choose from a wide variety of XML parsers depending on the language they are written (ASP, PHP, Java, etc.)&amp;nbsp; It is important that you recognize if the application you’re testing uses any of these parsers.&amp;nbsp; If so, it is a clear indication that the application manipulates XML.&amp;nbsp; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;SAXParser (Java) &lt;/li&gt;&lt;li&gt;MSXML (including Microsoft XML DOM Parser) &lt;/li&gt;&lt;li&gt;Xerces (Java, C++, Perl) &lt;/li&gt;&lt;li&gt;Oracle XML Parser &lt;/li&gt;&lt;li&gt;XML Booster &lt;/li&gt;&lt;li&gt;XML::Parser (form Perl) &lt;/li&gt;&lt;li&gt;XParse&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This short list illustrates that the programmer has different choices when selecting an XML parser.&amp;nbsp; Make sure to look for the presence of any of these.&amp;nbsp; In addition, keep up with the latest XML parsing technology and research for additional parsers that your application might use.&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Look for code that writes XML from user-supplied input&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;Any code that uses user-supplied input (from web forms, URLs, etc) must be marked as high risk.&amp;nbsp; Below is an example that uses the input parameter from a URL to construct XML:&lt;/p&gt;&lt;pre&gt;set xmlDoc=CreateObject("Microsoft.XMLDOM")&lt;/pre&gt;&lt;pre&gt;xmlDoc.async="false"&lt;/pre&gt;&lt;pre&gt;xmlDoc.load("accounts.xml")&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;for each x in xmlDoc.documentElement.childNodes&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; document.write(x.nodename)&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; document.write(": ")&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; document.write(x.text)&lt;/pre&gt;&lt;pre&gt;&amp;nbsp; document.write(Request.QueryString("input"))&lt;/pre&gt;&lt;pre&gt;next&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Detect applications that use the CDATA tag&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;Look at both the application code and storage XML files to identify the usage of the CDATA tag.&amp;nbsp; Identifying CDATA tags inside XML documents is easy.&amp;nbsp; Just search the contents of all XML documents in your application looking for the string “CDATA”.&amp;nbsp; Then track down the code that uses the data read from this kind of tag.&amp;nbsp; Any component that directly writes the contents of CDATA tags to an HTML response is vulnerable to cross-site scripting attacks through XML injection:&lt;/p&gt;&lt;pre&gt;Response.Write(contents from CDATA tag)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (ASP)&lt;/pre&gt;&lt;pre&gt;echo contents from CDATA tag;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (PHP)&lt;/pre&gt;&lt;pre&gt;print contents from CDATA tag;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (PHP)&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Don’t rely on XML Document Type Definitions (DTDs)&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;Programmers might assume that defining XML tags using DTD&lt;a href="about:blank#_edn3" name="_ednref3"&gt;[iii]&lt;/a&gt; protects them against XML injection attacks.&amp;nbsp; As we will see later on, this is a misconception.&amp;nbsp; Include any document that handles XML (using DTD or not) as a high risk component. &lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Match High Risk Components with Entry Points&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;Non-validated XML data can come from any application entry point.&amp;nbsp; Make sure to cover all the possible sources of malicious data which might get passed to a client.&amp;nbsp; Common data sources include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Web forms &lt;/li&gt;&lt;li&gt;URL contents &lt;/li&gt;&lt;li&gt;Flash parameters &lt;/li&gt;&lt;li&gt;XML store contents &lt;/li&gt;&lt;li&gt;Web service data &lt;/li&gt;&lt;li&gt;Graphical User Interface&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;List the high risk application components (usually web pages such as the ones in the scenarios above) and their related entry points to systematically aid with your testing: &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Line&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Form&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Flash&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;DB&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Service&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;CreateChecking.php&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;101&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;112&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;165&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Response.php&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;1001&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;1116&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;Present.php&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;234&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;531&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;showAccount.php&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;432&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;X&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h1&gt;Step 3:&amp;nbsp; Start Testing and Exploring&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/h1&gt;&lt;p&gt;This step of testing is focused on submitting basic XML injection fuzz strings and observing how the application reacts.&amp;nbsp; Then, we will try to execute two simple XML injection attacks as shown in the previous scenarios:&amp;nbsp; tag injection and CDATA XSS.&amp;nbsp; &lt;/p&gt;&lt;p&gt;Try all of the tests in this step through the easiest entry point for each high risk component.&amp;nbsp; In step 4 you will tune your test case data to cover the different formats and encoding depending on the remaining entry points.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Start with simple fuzz strings&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;Successful XML injection testing depends on whether the tester is able to send XML data that will end up being processed as expected XML. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Closing quotes and tag characters&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;It is recommend that you start testing with a simple XML string consisting of a single quote, a closing tag character, an opening tag character and a double quote.&amp;nbsp; Try these four characters separately and combined:&lt;/p&gt;&lt;p&gt;'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (separately)&lt;/p&gt;&lt;p&gt;or&amp;nbsp; &lt;/p&gt;&lt;p&gt;'"&amp;gt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;gt;'"&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;&amp;gt;'"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (combined)&lt;/p&gt;&lt;p&gt;Then, observe how the XML-based server responds.&amp;nbsp; The idea is to modify a valid XML tag such as the first string below, to the second one.&amp;nbsp; Here, set the &lt;strong&gt;$input&lt;/strong&gt; variable to a single quote ('):&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;&amp;lt;node attrib='$input'/&amp;gt;&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&amp;lt;node attrib='''/&amp;gt;&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;Because the &lt;em&gt;node&lt;/em&gt; element will now have the &lt;em&gt;attrib&lt;/em&gt; attribute set to &lt;strong&gt;''' (&lt;/strong&gt;note the extra single quote), it will result in invalid XML.&amp;nbsp; An invalid XML message from the server is a good indication that there are potential XML injection bugs present in the server application.&lt;/p&gt;&lt;pre&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Comment strings&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Another way to generate invalid XML is to add the start of an XML comment:&amp;nbsp;&lt;/p&gt;&lt;p&gt;xyz&amp;lt;!--&lt;/p&gt;&lt;p&gt;Let’s say that you entered the string above as the &lt;em&gt;username&lt;/em&gt;.&amp;nbsp; The resulting XML will now look like this and will end up being invalid:&lt;/p&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;user&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;username&amp;gt;xyz&amp;lt;!--&amp;lt;/username&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password&amp;gt;qwerty&amp;lt;/password&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;userid&amp;gt;111&amp;lt;userid/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;mail&amp;gt;JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ampersand (&amp;amp;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;XML uses the ampersand character to refer to another entity in its user-defined XML schema.&amp;nbsp; For example, if the user passes the following string as the &lt;em&gt;username,&lt;/em&gt; it will result in the corresponding XML:&lt;/p&gt;&lt;pre&gt;&amp;amp;amp;xyz&lt;/pre&gt;&lt;p&gt;Results in:&lt;/p&gt;&lt;pre&gt;&amp;lt;user&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;username&amp;gt;&amp;amp;xyz&amp;lt;/username&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password&amp;gt;qwerty&amp;lt;/password&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;userid&amp;gt;111&amp;lt;userid/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;mail&amp;gt;JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&amp;nbsp;&lt;/pre&gt;&lt;p&gt;This will attempt to refer to the &lt;strong&gt;&amp;amp;xyz&lt;/strong&gt; entity of the XML document.&amp;nbsp;&amp;nbsp; If the document doesn’t contain this entity, then the newly built tag above will result in an invalid XML document.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Learn from error messages to conduct a real attack&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;The purpose of creating invalid XML documents is so that you can start gaining information about the underlying XML format based on error messages they generate.&amp;nbsp; Let’s say you inserted the following fuzz string (‘) in an input field and the server responded with the following error message:&lt;/p&gt;&lt;pre&gt;Invalid XML:&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&amp;lt;user name='''/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;id ='1232'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;realname='tester'&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password='ind3$truct'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;user&amp;gt;&lt;/pre&gt;&lt;p&gt;Now, consider how you can utilize this information to create an additional, valid user while conserving the structure and format of the original XML document:&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;$input = attacker'&amp;gt;&amp;lt;id ='1234'/&amp;gt;&amp;lt;realname='hacker'&amp;gt;&amp;lt;password='qwerty'/&amp;gt;&amp;lt;/user&amp;gt;&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&amp;lt;user name ='real_user&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;results in the server creating an extra element:&lt;/p&gt;&lt;pre&gt;&amp;lt;user name='attacker'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;id ='1234'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;realname='hacker'&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password='ind3$truct'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;user name='real_user'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;id ='1232'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;realname='tester'&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;password='ind3$truct'/&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/user&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Try to exploit CDATA tags with Cross-Site Scripting (XSS) attacks&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;To finish this step try to exploit the contents of CDATA tags to see if you can execute an XSS attack.&amp;nbsp; This test is quite straight forward, simply remember that the XML parser extracts all data enclosed in between the tags &lt;strong&gt;"&amp;lt;![CDATA[" &lt;/strong&gt;and &lt;strong&gt;"]]&amp;gt;" &lt;/strong&gt;to form a new string.&amp;nbsp; For example:&lt;/p&gt;&lt;pre&gt;&amp;lt;![CDATA[xyz]]&amp;gt;&lt;/pre&gt;&lt;p&gt;Becomes:&lt;/p&gt;&lt;pre&gt;xyz&lt;/pre&gt;&lt;p&gt;In the same manner:&lt;/p&gt;&lt;pre&gt;&amp;lt;![CDATA[&amp;lt;]]&amp;gt;script&amp;lt;![CDATA[&amp;gt;]]&amp;gt;&lt;/pre&gt;&lt;p&gt;Becomes:&lt;/p&gt;&lt;pre&gt;&amp;lt;script&amp;gt;&lt;/pre&gt;&lt;p&gt;Finally:&lt;/p&gt;&lt;pre&gt;&amp;lt;![CDATA[&amp;lt;script&amp;gt;alert('XSS')&amp;lt;/script&amp;gt;]]&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/pre&gt;&lt;p&gt;Becomes:&lt;/p&gt;&lt;pre&gt;&amp;lt;script&amp;gt;alert('XSS')&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;h1&gt;Step 4:&amp;nbsp; Tune Test Cases&lt;/h1&gt;&lt;p&gt;During this step you must focus in modifying your test case data to cover all entry points based on the format of each specific entry point.&amp;nbsp; In addition, you must tune your test case data in order to execute additional XML Injection payloads. &lt;/p&gt;&lt;h2&gt;&lt;em&gt;Consider string format and encoding according to entry point&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Web Forms&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;Web forms are the easiest to test since they commonly allow most ASCII strings.&amp;nbsp; An attacker can try entering this string into an input field, for instance in the web form below:&lt;/p&gt;
&lt;p&gt;&lt;img src="X:\Trash\GE\clip_image001.png"&gt;&lt;/p&gt;&lt;p&gt;An attacker might try to enter this string in the email text field to execute an XML injection attack:&lt;/p&gt;&lt;pre&gt;JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&amp;lt;account type="savings"&amp;gt;&amp;lt;created&amp;gt;03-02-2008&amp;lt;/created&amp;gt;&amp;lt;number&amp;gt;12345678&amp;lt;/number&amp;gt;&amp;lt;balance&amp;gt;1000000&amp;lt;/balance&amp;gt;&amp;lt;/account&amp;gt;&lt;/pre&gt;&lt;p&gt;It’s possible that client side checks are in place to match the contents of this text field with a valid email format.&amp;nbsp; However, client side checks are easily bypassed by removing them at the attacker’s end.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;URL Contents&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;The format of URLs tends to be more complex than that of other input fields.&amp;nbsp; This is due to the need for URLs to contain special or reserved characters, such as spaces, questions marks, single quotes, less than/greater than (&amp;lt;/&amp;gt;) symbols, and ampersands as data, rather than URL directives.&amp;nbsp; The client &lt;em&gt;encodes&lt;/em&gt; the URL and then sends it to the server, which decodes it so that the special characters can be processed as data.&lt;/p&gt;&lt;p&gt;How the encoding and decoding is done depends on the programming language in use.&amp;nbsp; For example, sometimes the encoding function replaces the blank spaces with a plus (+) sign, or the characters %20, so that:&lt;/p&gt;&lt;pre&gt;Joseph Cohen&lt;/pre&gt;&lt;p&gt;Becomes:&lt;/p&gt;&lt;pre&gt;Joseph+Cohen&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/pre&gt;&lt;p&gt;or&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;Joseph%20Cohen&lt;/pre&gt;&lt;p&gt;The most common URL encoding scheme consists of replacing special and reserved characters with a percent sign and then their hexadecimal values (e.g. &lt;strong&gt;%HH&lt;/strong&gt;.)&amp;nbsp; Using this encoding scheme the URL seen below will be translated from:&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;amp;password=qwerty&amp;amp;email=JohnyC@examplesite.com&amp;lt;/mail&amp;gt;&amp;lt;account type="savings"&amp;gt;&amp;lt;created&amp;gt;03-02-2008&amp;lt;/created&amp;gt;&amp;lt;number&amp;gt;12345678&amp;lt;/number&amp;gt;&amp;lt;balance&amp;gt;1000000&amp;lt;/balance&amp;gt;&amp;lt;/account&amp;gt;&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;to: &amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;amp;password=qwerty&amp;amp;email=JohnyC%40examplesite.com%3c%2fmail%3e%3caccount%20type%3d%22savings%22%3e%3ccreated%3e03-02-2008%3c%2fcreated%3e%3cnumber%3e12345678%3c %2fnumber%3e%3cbalance%3e1000000%3c%2fbalance%3e%3c%2faccount%3e&lt;/strong&gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;This is because the below characters translate to their hex encoding like this:&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;space&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;@&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&amp;lt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;/&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&amp;gt;&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;=&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;"&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%20&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%40&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%3c&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%2f&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%3e&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%3d&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;%22&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Flash Parameters&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Flash uses the &lt;strong&gt;FlashVars &lt;/strong&gt;parameter tag from HTML embedded objects to collect user input:&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"&lt;/pre&gt;&lt;pre&gt; codebase=""http://macromedia.com/cabs/swflash.cab#version=6,0,0,0""&lt;/pre&gt;&lt;pre&gt; width="250" height="250" id="flaMovie1" align="center"&amp;gt;&lt;/pre&gt;&lt;pre&gt; &amp;lt;param name=movie value="flaMovie1.swf"&amp;gt;&lt;/pre&gt;&lt;pre&gt; &amp;lt;param name=FlashVars value="input=userInput"&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&amp;lt;param name=quality value=high&amp;gt; &lt;/pre&gt;&lt;pre&gt;&amp;lt;/object&amp;gt;&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;When testing through &lt;strong&gt;FlashVars &lt;/strong&gt;you need to replace the &lt;strong&gt;userInput &lt;/strong&gt;value with the XML injection string.&amp;nbsp; &lt;/p&gt;&lt;p&gt;Note: Make sure that you also try different encodings when you test through this entry point.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;XML store contents&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You must also tune your test case data when modifying the CDATA tag within XML files to execute a successful XSS attack.&amp;nbsp; For instance, some applications may blacklist any input that contains the following string, thus not allowing it to be placed in the XML data store:&amp;nbsp;&lt;/p&gt;&lt;pre&gt;&amp;lt;script&amp;gt; &lt;/pre&gt;&lt;br&gt;&lt;p&gt;Here you may need to tweak your attack data to hide the script tags by adding extra CDATA tags&lt;strong&gt;&lt;em&gt;:&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;data&amp;gt;&amp;lt;[CDATA[&amp;lt;sc]]&amp;gt;&amp;lt;![CDATA[ript&amp;gt;alert('XSS')&amp;lt;/sc]]&amp;gt;&amp;lt;![CDATA[ript&amp;gt;]]&amp;gt;&amp;lt;/data&amp;gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;At the end the contents within the CDATA tags get concatenated to construct a valid &amp;lt;script&amp;gt; tag.&amp;nbsp; This will bypass any checks done for &lt;strong&gt;&amp;lt;script&amp;gt;&lt;/strong&gt; before the final concatenation.&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Additional entry points&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Each application will have different ways of processing input from users, files, services, and other software entities.&amp;nbsp; Ensure that you understand the format of each entry point and cover the different formats on each entry point for each high risk component.&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Try additional payloads&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;So far you’ve learned how to execute two payloads:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tag injection. &lt;/li&gt;&lt;li&gt;Cross-site scripting through CDATA tags.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are other payloads that you can try such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Denial of service by consuming extra memory with excessive tags. &lt;/li&gt;&lt;li&gt;Denial of service by resource exhaustion via recursive elements. &lt;/li&gt;&lt;li&gt;Information disclosure attacks using XML External Entities (XEE)&lt;a href="about:blank#_edn4" name="_ednref4"&gt;[iv]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Each payload will require special tweaking of the XML attack data and might add new entry points to the scenario.&amp;nbsp; However, it is imperative that you keep up to date with the latest attack techniques related to XML injection and include them in your security test suite.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h1&gt;Conclusions&lt;/h1&gt;&lt;p&gt;Testing for XML injection requires that you understand how the application under test uses XML.&amp;nbsp; There are different scenarios ranging from when systems take XML as input, to when systems respond with XML as HTML output.&amp;nbsp; To successfully test for XML injection you need to understand these different scenarios.&amp;nbsp; Then, familiarize yourself with any potentially dangerous code and characteristics of any high risk components that are present.&amp;nbsp; Create a test plan that matches high risk components with their different entry points.&amp;nbsp; Then, start testing with simple test strings and observe how the application responds.&amp;nbsp; Finally, to achieve the most complete coverage, ensure that you tune your attack data to cover all formats in all entry points, and try different, up to date payloads.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;hr&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="about:blank#_ednref1" name="_edn1"&gt;[i]&lt;/a&gt;Programming Web Services with SOAP.&amp;nbsp; James Snell, Doug Tidwell &amp;amp; Pavel Kulchenko.&amp;nbsp; &lt;a href="http://www.topxml.com/soap/articles/webservices/default.asp"&gt;http://www.topxml.com/soap/articles/webservices/default.asp&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="about:blank#_ednref2" name="_edn2"&gt;[ii]&lt;/a&gt; XML Web Services Basics.&amp;nbsp; Roger Wolter.&amp;nbsp; Microsoft Corporation.&amp;nbsp; &lt;a href="http://msdn2.microsoft.com/en-us/library/ms996507.aspx"&gt;http://msdn2.microsoft.com/en-us/library/ms996507.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="about:blank#_ednref3" name="_edn3"&gt;[iii]&lt;/a&gt; Document Type Definition.&amp;nbsp; Wikipedia.&amp;nbsp; &lt;a href="http://en.wikipedia.org/wiki/Document_Type_Definition"&gt;http://en.wikipedia.org/wiki/Document_Type_Definition&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="about:blank#_ednref4" name="_edn4"&gt;[iv]&lt;/a&gt; Testing for XML Injection. OWASP. &lt;a href="http://www.owasp.org/index.php/Testing_for_XML_Injection"&gt;http://www.owasp.org/index.php/Testing_for_XML_Injection&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
</guidanceItem>