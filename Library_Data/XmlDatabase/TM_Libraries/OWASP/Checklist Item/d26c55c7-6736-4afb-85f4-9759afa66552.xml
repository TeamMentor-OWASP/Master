<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="d26c55c7-6736-4afb-85f4-9759afa66552" Author="" Category="Input and Data Validation" Priority="2" Rule_Type="Checklist Item" Status="" Technology="Java" title="User-Supplied Filenames And Paths Are Validated" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Check that filenames and path input are carefully validated. Verify that whitelist techniques are used when validating input.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Filenames and paths interact directly with the underlying filesystem. Allowing malicious users to manipulate file system operations either&amp;nbsp;directly or indirectly through their input can expose important sensitive system files. Canonicalization vulnerabilities can result in an attacker gaining access to unexpected resources.&lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;An application can take input via various ways such as a web interface, database, file system or other software running on the server. Use the following steps to establish a validation strategy:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify all sources of input that include file names and paths. &lt;/strong&gt;During design time, identify all of the potential input sources to your application. Scour the source code to discover sources of input that may have been missed in your application's design. The most common entry points are: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;URL based parameters &lt;/li&gt;&lt;li&gt;Form based parameters &lt;/li&gt;&lt;li&gt;Hidden fields &lt;/li&gt;&lt;li&gt;Cookies &lt;/li&gt;&lt;li&gt;HTTP headers (host, accept types, www authentication, cache settings, encodings, etc) &lt;/li&gt;&lt;li&gt;Local filesystem &lt;/li&gt;&lt;li&gt;Database &lt;/li&gt;&lt;li&gt;Other services running on the system &lt;/li&gt;&lt;li&gt;Javascript variables &lt;/li&gt;&lt;li&gt;File upload and attributes (filename, size, data, etc) &lt;/li&gt;&lt;li&gt;DNS results or host names &lt;/li&gt;&lt;li&gt;External component call return values (COM, AJAX, ActiveX)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Input that contains file names and paths may be identified by any of the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;import java.io.*; &lt;/li&gt;&lt;li&gt;BufferedReader &lt;/li&gt;&lt;li&gt;FileReader &lt;/li&gt;&lt;li&gt;FileInputStream &lt;/li&gt;&lt;li&gt;DataInputStream &lt;/li&gt;&lt;li&gt;readLine() &lt;/li&gt;&lt;li&gt;read() &lt;/li&gt;&lt;li&gt;Load() &lt;/li&gt;&lt;li&gt;Marshall()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trace data from source to sink. &lt;/strong&gt;Trace each source of input from the immediate source, through your application, to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database. Create a list of the input sources that result in interaction with the file system through creation or modification of file names or paths. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify validation routines. &lt;/strong&gt;Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base and may be located in a single component.&lt;/p&gt;&lt;p&gt;Validation may be identified by any of the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Custom Java Validator class &lt;/li&gt;&lt;li&gt;Regular expression use (&lt;strong&gt;java.util.regex&lt;/strong&gt;) &lt;/li&gt;&lt;li&gt;Method names that contain &lt;strong&gt;validate&lt;/strong&gt; or &lt;strong&gt;validator&lt;/strong&gt; &lt;/li&gt;&lt;li&gt;Client-side validation is often linked to events: &lt;ul&gt;&lt;li&gt;onSubmit &lt;/li&gt;&lt;li&gt;onChange &lt;/li&gt;&lt;li&gt;onFocus &lt;/li&gt;&lt;li&gt;onBlur &lt;/li&gt;&lt;li&gt;onKeyDown/Press/Up&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you identify client-side validation in your application, verify that there is a corresponding validation routine on the server side as well. Consult the &lt;a href="ruledisplay:D089D9CA-860C-4F98-BC7E-5AD7553DB6DD"&gt;Client-Side Validation is Not Relied On&lt;/a&gt; checklist for more details.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure validation includes file names and paths. &lt;/strong&gt;Attackers will attempt several different file name or path representations in order to change the file names or paths the application writes to. These types of attacks are called Canonicalization Attacks and occur when input applied to the file system is not in the simplest form and is not validated in the right context or form.&lt;br&gt;&lt;br&gt;Validation should be performed on input in the same form that it will be used in. Validating input before it is decoded into another form or before its full path is expanded leaves your application open to attack.&lt;br&gt;&lt;br&gt;Validation routines for file names and paths should perform two types validation on the input:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;A hard-coded base directory should be used in conjunction with the input&lt;/strong&gt;: The base directory (and its children) should be the only location that the application can physically write to and should also be the only location that user-supplied input can navigate. Establishing a proper base directory ensures that users do not directly have access to system files. If your application is Windows-based, ensure that your base directory is located in a partition that is different than the partition hosting the critical system services.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Whitelisting should be performed on the input&lt;/strong&gt;: Whitelisting ensures that file names and paths are provided in the intended format, and that unexpected formats are discarded. &lt;/p&gt;&lt;p&gt;These two paths represent the same file:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;d:\myapp\temp\..\temp\file.dat&lt;br&gt;d:\myapp\temp\..\temp\..\temp\file.dat&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;The paths above can continue to be expanded out in similar fashion and still refer to the same file. Types of encodings (&lt;strong&gt;d%3A%5Cmyapp%5Ctemp%5Cfile.dat&lt;/strong&gt;) can be used in order to further complicate the representation. Attackers hope that the more complicated the representation, the less likely it is that the developer wrote a case to handle it. The simplest form of these paths is:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;d:\myapp\temp\file.dat&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;Therefore, check file names by obtaining the full name of the file&amp;nbsp;by calling the &lt;strong&gt;java.io.File.getCanonicalPath()&lt;/strong&gt; method. Whitelisting will allow only expected formats and encodings be used by the application, which is most likely the simplest form of the file name or path. Ensure that whitelisting is applied to the input, using a regular expression, custom validator or similar method, and that input that does not match the whitelist is discarded.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Check for common mistakes.&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Verify that all files are represented using a &lt;strong&gt;java.io.File&lt;/strong&gt; object instead of a &lt;strong&gt;String&lt;/strong&gt; object. Using the &lt;strong&gt;File&lt;/strong&gt; object allows you to access the actual file and some useful and relevant information such as the file's size, parent, path, etc.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Check if your application's filesystem is case-sensitive. Because most UNIX based operating systems have case-sensitive filesystems, &lt;strong&gt;FILE.DAT&lt;/strong&gt; and &lt;strong&gt;file.dat&lt;/strong&gt; represent&amp;nbsp;two different files. However, Windows has a case-insensitive filesystem; therefore, &lt;strong&gt;FILE.DAT&lt;/strong&gt; and &lt;strong&gt;file.dat&lt;/strong&gt; represent the same file. If your application's filesystem is case-insensitive, make sure that the &lt;strong&gt;CASE_INSENSITIVE&lt;/strong&gt; flag is specified when using regular expressions to validate your file inputs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Verify the path delimiters that your application's filesystem uses and check if they are consistent throughout the code. For example, Windows uses '&lt;strong&gt;\&lt;/strong&gt;' or '&lt;strong&gt;/&lt;/strong&gt;' to distinguish directories inside a path while UNIX based systems use only '&lt;strong&gt;/&lt;/strong&gt;' to accomplish the same task.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following code allows the user to read the contents of a report file, located in /myapp/temp/. Unfortunately, the code is missing filename validation; therefore the application is exposed to a directory traversal attack:&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;pre&gt;import java.io.*;&lt;br&gt;import java.util.*;&lt;br&gt;import java.lang.*;&lt;br&gt;import javax.servlet.*;&lt;br&gt;import javax.servlet.http.*;&lt;br&gt;public final class ReportDownloader extends HttpServlet&lt;br&gt;{&lt;br&gt;      public void doGet(HttpServletRequest request,&lt;br&gt;                        HttpServletResponse response) throws ServletException, IOException&lt;br&gt;      {&lt;br&gt;            response.setContentType("application/vnd.ms-excel");&lt;br&gt;            String baseDir = "/myapp/temp/";&lt;br&gt;            PrintWriter out = response.getWriter();&lt;br&gt;            String filename = request.getParameter("file");&lt;br&gt;            BufferedReader fin;&lt;br&gt;            String data = "";&lt;br&gt;            try&lt;br&gt;            {&lt;br&gt;                  File reportFile = new File(baseDir + filename);&lt;br&gt;                  // The application fails to validate the user-supplied filename&lt;br&gt;                  fin = new BufferedReader(new FileReader(reportFile));&lt;br&gt;                  StringBuilder sb = new StringBuilder();&lt;br&gt;                  while (data != null)&lt;br&gt;                  {&lt;br&gt;                        data = fin.readLine();&lt;br&gt;                        if (validateData(data))&lt;br&gt;                        {&lt;br&gt;                              sb.append(data);&lt;br&gt;                        }&lt;br&gt;                        else&lt;br&gt;                        {&lt;br&gt;                              // Add the appropriate logging and exception handling&lt;br&gt;                              // mechanisms. Consult the Exception Handling and&lt;br&gt;                              // Logging sections&lt;br&gt;                              out.println("We cannot handle your request at the moment."&lt;br&gt;                                       +  "Please try again later.");&lt;br&gt;                              return;&lt;br&gt;                        }&lt;br&gt;                  }&lt;br&gt;                  out.println(sb.toString());&lt;br&gt;            }&lt;br&gt;            catch (Exception e)&lt;br&gt;            {&lt;br&gt;                  // Add the appropriate logging and exception handling mechanisms&lt;br&gt;                  // Consult the Exception Handling and Logging sections&lt;br&gt;                  out.println("We cannot handle your request at the moment."&lt;br&gt;                           +  "Please try again later.");&lt;br&gt;            }            out.flush();&lt;br&gt;            out.close();&lt;br&gt;      }&lt;br&gt;      boolean validateData(String input)&lt;br&gt;      {&lt;br&gt;            // Implement a validation routine for the format of the reports&lt;br&gt;      }&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Related Guideline&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:BEC58471-A0EF-40C5-8C9D-9BF5C4B91F1F"&gt;Guideline: Filter All User-Supplied Filename and Path Input (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;/ol&gt;</content>
</guidanceItem>