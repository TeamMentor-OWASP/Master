<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="b01640d3-706c-480d-9cce-419d32d97bed" Author="" Category="Sensitive Data" Priority="2" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Sensitive Data Is Protected Over the Network" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that encryption is used to protect sensitive data that is transmitted over the network.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;When data is sent over the network, it typically passes through several intermediate relays on its way towards some final destination. Using a safe protocol to transmit information is important because it adds protection against a &lt;a href="ruledisplay:5F929DD7-759F-4412-A9B1-08567CDE9035"&gt;Network Eavesdropping Attack&lt;/a&gt; or &lt;a href="ruledisplay:48BB4D3A-9295-4263-B3E7-090E483DEC5D"&gt;Man in the Middle Attack&lt;/a&gt; during transport.&lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;When an application transmits sensitive data over the network, it is necessary to ensure that it is encrypted to protect the data from being stolen or modified in transit. To ensure this, follow the steps outlined below:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify sensitive information.&lt;/strong&gt; Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. &lt;/li&gt;&lt;li&gt;Information that a user provides that they would not want shared with other users of the application. &lt;/li&gt;&lt;li&gt;Information that comes from an external trusted source that is not designed to be shared with users&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify that sensitive data is securely transmitted.&lt;/strong&gt; Ensure that your application transmits sensitive data in a secured fashion. Check if your application uses the following approaches:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encrypting the communication links.&lt;/strong&gt; Using the &lt;a href="ruledisplay:F4F69A8F-F164-4821-89D3-B49571922848"&gt;Communication Links are Encrypted&lt;/a&gt; checklist, check if your application's communication links are properly secured.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encrypting application data.&lt;/strong&gt; If your application encrypts its application data, check if your application securely transforms its application data before transmitting it over the network: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hashing. &lt;/strong&gt;Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as means for storing sensitive data, verify that the following pieces are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Salt&lt;/strong&gt;: Check if your application generates its salt using the &lt;strong&gt;RNGCryptoServiceProvider&lt;/strong&gt; class. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Function&lt;/strong&gt;: Check if your application uses SHA-256, SHA-384, or SHA-512 as its hash function. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Invocation&lt;/strong&gt;: Check if your application invokes the &lt;strong&gt;HMAC.ComputeHash&lt;/strong&gt; method to perform the hashing procedure. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Clean-up&lt;/strong&gt;: Check if your application securely cleans-up all instances of the sensitive data after the hashing procedure has been completed. Consult the &lt;a href="ruledisplay:026A38B1-C59E-4BB7-952F-4EB7206E3717"&gt;Sensitive Data is Cleared from Memory when No Longer Used&lt;/a&gt; checklist for more details.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encryption.&lt;/strong&gt; Encryption is a mechanism for storing and transmitting sensitive data in a retrievable way. If your application uses encryption as means for storing sensitive data, verify that the following pieces are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Encryption Key&lt;/strong&gt;: Verify that your application's encryption keys are securely stored inside your application's key store. Consult the &lt;a href="ruledisplay:E8373C06-29F7-4F7B-BAEB-24C5F19DFAC8"&gt;A Secure Key Storage Location is Used&lt;/a&gt; checklist for more details. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Function&lt;/strong&gt;: Check if your application uses AES, AES256, or a similar modern strong symmetric encryption function. 3DES and other, older algorithms should be avoided for new development. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Invocation&lt;/strong&gt;: Check if your application invokes the &lt;strong&gt;SymmetricAlgorithm.Create&lt;/strong&gt; and &lt;strong&gt;ICryptoTransform.TransformFinalBlock&lt;/strong&gt; methods to perform the encryption procedure. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Clean-up&lt;/strong&gt;: Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed. Consult the &lt;a href="ruledisplay:026A38B1-C59E-4BB7-952F-4EB7206E3717"&gt;Sensitive Data is Cleared from Memory when No Longer Used&lt;/a&gt; checklist for more details.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component relies on an independent account management system that resides on another server. The web component communicates with the account management system using a SQL socket connection. The two servers are located in a competitively priced data center that houses a number of other customers, all of which are able to access the building at all times. A malicious user purchases hosting services at the same company, and after exploring the hosting environment, learns that the hosted accounts are networked using a shared bus topology that allows for network snooping. The attacker is able to setup a sniffer, and captures all of the communication between the account management component and the web component, since SQL connections are not encrypted by default. The attacker can now log in as a legitimate user on the account management server and make changes at will.&lt;/p&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;For more information about the SHA hashing functions, visit: &lt;a href="http://en.wikipedia.org/wiki/SHA_hash_functions"&gt;SHA hash functions&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;For more information about symmetric cryptography, visit: &lt;a href="http://en.wikipedia.org/wiki/Symmetric-key_algorithm"&gt;Symmetric-key algorithm&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Guideline&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:FCB0A4AC-A559-430D-9145-08340EC73FED"&gt;Guideline: Protect Sensitive Data Over the Network &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>