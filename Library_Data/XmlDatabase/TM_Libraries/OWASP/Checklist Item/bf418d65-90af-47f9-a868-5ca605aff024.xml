<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="bf418d65-90af-47f9-a868-5ca605aff024" Author="" Category="Data Access" Priority="2" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Dynamic Queries That Accept User Input Are Used Only If Stored Procedures Cannot Be Used" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Check to ensure that your application avoids constructing SQL queries in code that include user input. Make sure that it uses parameterized stored procedures that use type safe SQL parameters. &lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;If you construct queries dynamically using user input, your code is susceptible to SQL injection. &lt;/p&gt;&lt;br&gt;&lt;h1&gt;How to Fix&lt;/h1&gt;&lt;p&gt;For example, avoid the following style of code.&lt;/p&gt;
&lt;pre&gt;// Use dynamic SQLSqlDataAdapter&lt;br&gt; myCommand = new SqlDataAdapter(&lt;br&gt;         "SELECT au_lname, au_fname FROM authors WHERE au_id = '" +&lt;br&gt;          SSN.Text + "'", myConnection);  &lt;/pre&gt;&lt;br&gt;&lt;p&gt;If a malicious user supplies "' ; DROP DATABASE pubs --'" for the SSN.Text field, the code inserts the user's malicious input and generates the following query:&lt;/p&gt;
&lt;pre&gt;SELECT au_lname, au_fname FROM authors WHERE au_id = ''; DROP DATABASE pubs --'  &lt;/pre&gt;&lt;br&gt;&lt;p&gt;The ; (semicolon) character tells SQL that this is the end of the current statement, which is then followed by the malicious SQL code, which in this example drops the authors table.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>