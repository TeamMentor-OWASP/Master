<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="f527a834-7f1b-41dd-9383-d386de47b9da" Author="" Category="Parameter Manipulation" Priority="2" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Page ViewStateUserKey Is Used to Counter One-click Attacks" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Check to ensure that all forms that require authentication or can be used to trigger important functionality are protected with ViewStateUserKey.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;A one-click attack consists of posting a malicious HTTP form to a known, vulnerable Web site. It is called "one-click" because it usually begins with an unaware victim clicking on an alluring link received through e-mail or found when navigating a crowded forum.&amp;nbsp; By following the link, the user inadvertently triggers a remote process that ends up submitting the malicious form to a site.&amp;nbsp; This allows an attacker to perform any action caused by the vulnerable form with the credentials of the victim.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ViewStateUserKey&lt;/strong&gt; makes it much harder for hackers to use the content of the client-side view state to prepare malicious posts against the site.&amp;nbsp; Each time a form is invoked, a unique key is generated.&amp;nbsp; The key contains encrypted time and session information, and the form submission is rejected if it is used in another session or after the session timeout has expired. &lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;Use the following steps to check whether ViewStateUserKey is used properly:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify pages that should be protected. &lt;/strong&gt;Review your application and make a list of all the forms that should be protected with ViewStateUserKey.&amp;nbsp; Forms that meet either of the following criteria should be protected:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The form requires authentication &lt;/li&gt;&lt;li&gt;The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Check to see if the pages are protected. &lt;/strong&gt;ViewStateUserKey can be set per page or in the &lt;strong&gt;OnInit&lt;/strong&gt; virtual method of the page-derived class.&amp;nbsp; &lt;/p&gt;&lt;ol&gt;&lt;li&gt;First check &lt;strong&gt;OnInit&lt;/strong&gt;, if you find protection there, then all of your pages are covered.&lt;br&gt;&lt;br&gt;&lt;pre&gt;protected override OnInit(EventArgs e) {&lt;br&gt;&amp;nbsp;&amp;nbsp; base.OnInit(e); &lt;br&gt;&amp;nbsp;&amp;nbsp; ViewStateUserKey = Session.SessionID;&lt;br&gt;}&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Next check the individual pages, for instance:&lt;br&gt;&lt;br&gt;&lt;pre&gt;void Page_Init (object sender, EventArgs e) {&lt;br&gt;&amp;nbsp;&amp;nbsp; ViewStateUserKey = Session.SessionID;&lt;br&gt;}&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure ViewStateUserKey is set properly. &lt;/strong&gt;Setting &lt;strong&gt;ViewStateUserKey&lt;/strong&gt; to a constant string—the same for all users—is like leaving it blank.&amp;nbsp; It must be set to something that varies for each user—such as user ID or, better yet, session ID.&amp;nbsp; For a number of technical and social reasons, session ID is a much better fit because a session ID is unpredictable, times out, and varies on a per-user basis. &lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;How to Fix&lt;/h1&gt;&lt;p&gt;The&amp;nbsp;following code added to each&amp;nbsp;of your pages will set the key based on SessionID.&lt;/p&gt;&lt;pre&gt;void Page_Init (object sender, EventArgs e) {&lt;br&gt;   ViewStateUserKey = Session.SessionID;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Alternatively, you can add this code to the &lt;strong&gt;OnInit&lt;/strong&gt; virtual method of the &lt;strong&gt;Page&lt;/strong&gt;-derived class.&amp;nbsp; (Note that you must set this property in the &lt;strong&gt;Page.Init&lt;/strong&gt; event).&amp;nbsp; This will allow you to write the code once rather than per page.&lt;/p&gt;&lt;pre&gt;protected override OnInit(EventArgs e) {&lt;br&gt;   base.OnInit(e); &lt;br&gt;   ViewStateUserKey = Session.SessionID;&lt;br&gt;}&lt;/pre&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:aa797ec2-627d-4b17-8c17-5a8405415344"&gt;Use Page ViewState User Key to Counter One-Click Attacks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>