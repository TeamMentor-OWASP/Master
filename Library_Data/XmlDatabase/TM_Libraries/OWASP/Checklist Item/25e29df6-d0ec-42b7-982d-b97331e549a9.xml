<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="25e29df6-d0ec-42b7-982d-b97331e549a9" Author="" Category="Data Access" Priority="1" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Type Safe SQL Parameters Are Used" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that type-safe parameters are used when constructing dynamic SQL queries or when passing parameters to stored procedures.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception.&lt;/p&gt;&lt;p&gt;If type-safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.&lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;To check if parameterized queries are used:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify all database transactions. &lt;/strong&gt;Locate all SQL queries throughout your application. Example:&lt;/p&gt;&lt;pre&gt;"select user from myappUsers where user = ? and pass = ?;"&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify that each transaction uses Stored Procedures where possible. &lt;/strong&gt;Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:&lt;/p&gt;&lt;pre&gt;SqlCommand myCommand = new SqlCommand("sp_SelectUser", myConnection);&lt;br&gt;//Specify our command is a stored procedure&lt;br&gt;myCommand.CommandType = CommandType.StoredProcedure; &lt;/pre&gt;&lt;p&gt;and not like:&lt;/p&gt;&lt;pre&gt;string SQLstr = "SELECT * from users&lt;br&gt;   WHERE username = '" + un.Text + "'&lt;br&gt;   AND password = '" + pass.Text + "'";&lt;br&gt;SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify that type-safe parameters are used. &lt;/strong&gt;Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:&lt;/p&gt;&lt;pre&gt;using (SqlConnection connection = new SqlConnection(connectionString))&lt;br&gt;{&lt;br&gt;  connection.Open();&lt;br&gt;  SqlDataAdapter myDataAdapter = new SqlDataAdapter(&lt;br&gt;         "SELECT * from users WHERE username = '@uname' AND password = '@pwd'", connection);&lt;br&gt;  myCommand.SelectCommand.Parameters.Add("@uname", SqlDbType.VarChar, 24);&lt;br&gt;  myCommand.SelectCommand.Parameters.Add("@pwd", SqlDbType.VarChar, 16);&lt;br&gt;  myCommand.SelectCommand.Parameters["@uname"].Value = un.Text;&lt;br&gt;  myCommand.SelectCommand.Parameters["@pwd"].Value = pass.Text;&lt;br&gt;  myDataAdapter.Fill(userDataset);  ...  connection.Close();&lt;br&gt;}&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:&lt;/p&gt;&lt;pre&gt;using (SqlConnection myConnection = new SqlConnection(connectionString))&lt;br&gt;{&lt;br&gt;  connection.Open();&lt;br&gt;  string SQLstr = "SELECT * from users WHERE username = '" + un.Text + "'&lt;br&gt;   AND password = '" + pass.Text + "'";&lt;br&gt;  SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);&lt;br&gt;  SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);&lt;br&gt;  myCommand.Connection.Open();&lt;br&gt;  SqlDataReader myReader = myCommand.ExecuteReader();&lt;br&gt;  ...&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:&lt;/p&gt;&lt;pre&gt;mjones' AND 1=1; -- &lt;/pre&gt;&lt;p&gt;This will result in the SQL statement being executed at the database level:&lt;/p&gt;&lt;pre&gt;SELECT * from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';&lt;/pre&gt;&lt;p&gt;This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.&lt;/p&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;To learn more about SQL injection, see: &lt;a href="http://en.wikipedia.org/wiki/SQL_injection"&gt;SQL Injection&lt;/a&gt; in Wikipedia. &lt;/li&gt;&lt;li&gt;To learn more about countering SQL injection in ASP.NET, visit: &lt;a href="http://msdn2.microsoft.com/en-us/library/ms998271.aspx"&gt;How To: Protect From SQL Injection in ASP.NET&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;To learn more about countering injection-based attacks in ASP.NET, see: &lt;a href="http://msdn2.microsoft.com/en-us/library/bb355989.aspx"&gt;How To: Protect From Injection Attacks in ASP.NET&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Guideline&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:3437DF81-6B8C-4A14-BB6E-34F6EE21C45F"&gt;Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>