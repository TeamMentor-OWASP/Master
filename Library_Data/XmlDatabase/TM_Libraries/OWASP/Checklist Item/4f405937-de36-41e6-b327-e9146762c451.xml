<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="4f405937-de36-41e6-b327-e9146762c451" Author="" Category="Input and Data Validation" Priority="1" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Input Is Validated for Length, Range, Format, And Type" Topic="Security" phase="Design" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Input is validated on the server to ensure that it is in the expected format, based upon which contexts the input is used in, and encoded appropriately on output.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your vulnerabilities in your application. Validating input helps to reduce these risks by ensuring that the input received matches the expected format. Input validation on its own is not sufficient; output encoding is also needed to fully prevent these attacks as well as to improve&amp;nbsp;reliability. Validation should always be as strict as possible, to ensure that problems do not arise from input thought to be out-of-range but harmless. An allow-list approach should always be taken, never a block list, to ensure that this property is maintained.&lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;To check for this problem, use the following steps: &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure&amp;nbsp;that numeric range constraints have been enforced. &lt;/strong&gt;Check that the &lt;em&gt;RangeValidator&lt;/em&gt; control has been used to constrain the numeric input to a specific range.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure that verification fields are validated. &lt;/strong&gt;Check that the &lt;em&gt;CompareValidator&lt;/em&gt; control has been used to ensure validity for verification fields. An example of a verification field is the password entry field, where the user is required to re-type the value and the two values are compared to validate them. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure that type constraints have been enforced on string fields. &lt;/strong&gt;Check that the &lt;em&gt;RegularExpressionValidator&lt;/em&gt; control has been used to validate string input. This validator performs a variety of checks on string input fields using regular expressions. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure that custom validation has been used to handle remaining input constraints. &lt;/strong&gt;Check that the &lt;em&gt;CustomValidator&lt;/em&gt; control has been used to validate input for constraints not handled by the built-in ASP.NET validators. When the &lt;strong&gt;CustomValidator&lt;/strong&gt; control is used, it is important to check that input has been validated for length, range, format and type. Use this validator in cases where your application might require certain business logic constraints which cannot be enforced by the existing validators for example. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure that the Regex class is being used to validate other sources. &lt;/strong&gt;If you need to validate input from sources other than form fields, such as query string parameters or cookies, check that the &lt;strong&gt;Regex&lt;/strong&gt; class, within the &lt;strong&gt;System.Text.RegularExpressions&lt;/strong&gt; namespace, is being used. &lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;Consider a very simple form for an online shopping cart. The cart component consists of two components:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;An HTML form that contains all of the fields that make up the order to be submitted for processing:&lt;/p&gt;&lt;pre&gt;&amp;lt;html&amp;gt;&lt;br&gt;  &amp;lt;head&amp;gt;&lt;br&gt;    &amp;lt;title&amp;gt;Widget shopping cart&amp;lt;/title&amp;gt;&lt;br&gt;  &amp;lt;/head&amp;gt;&lt;br&gt;  &amp;lt;body&amp;gt;&lt;br&gt;    &amp;lt;H1&amp;gt;Welcome to the most boring shopping cart on the web!&amp;lt;/H1&amp;gt;&lt;br&gt;     A widget's current price is $19.95 USD. Please use the following form to submit an order.&lt;br&gt;    &amp;lt;form action="process_order.aspx" method="POST"&amp;gt;&lt;br&gt;       &amp;lt;p&amp;gt;Please enter the number of widgets you would like to purchase:&amp;lt;/p&amp;gt;&lt;br&gt;      quantity:&amp;lt;br/&amp;gt;&lt;br&gt;      &amp;lt;select name="WidgetQuantity"&amp;gt;&lt;br&gt;        &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;&lt;br&gt;      &amp;lt;/select&amp;gt;&lt;br&gt;      ...&lt;br&gt;      &amp;lt;input type="submit" value="order"/&amp;gt;&lt;br&gt;    &amp;lt;/form&amp;gt;&lt;br&gt;  &amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An ASP.NET page that processes the form submissions and performs the necessary steps to create the order.&lt;/p&gt;&lt;pre&gt;int dQuantity = Request("WidgetQuantity");&lt;br&gt;double dPrice = 19.95;&lt;br&gt;double dCost = dQuantity * dPrice;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This server side page is problematic because it lacks validation to ensure the quantity field is correct. The application works fine in the case where a user plays by the rules and submits the form as it is shown, because the quantity field ensures that the range constraints for the order quantity are always valid. However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs later on.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>