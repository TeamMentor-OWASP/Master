<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="93edf997-ee9c-4290-9041-2673fb656781" Author="" Category="Input and Data Validation" Priority="2" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Free Form Input Is Sanitized to Protect Against Malicious Data" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that your application validates all forms of input&amp;nbsp;and cleans malicious data either by&amp;nbsp;rejecting or sanitizing it.&lt;/p&gt;&lt;h1&gt;How to Fix&lt;/h1&gt;&lt;p&gt;Do not trust input. An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities. Check for known good data, and constrain input by validating it for type, length, format, and range.&lt;/p&gt;&lt;p&gt;For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the &lt;strong&gt;RegularExpressionValidator&lt;/strong&gt;, &lt;strong&gt;RangeValidator&lt;/strong&gt;, and &lt;strong&gt;CustomValidator&lt;/strong&gt;, to validate and constrain input. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the &lt;strong&gt;Regex&lt;/strong&gt; class, and you can validate numeric ranges by converting the input value to an integer or double and then performing a range check.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>