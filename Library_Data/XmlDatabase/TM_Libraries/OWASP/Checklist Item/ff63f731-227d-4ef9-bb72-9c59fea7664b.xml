<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="ff63f731-227d-4ef9-bb72-9c59fea7664b" Author="" Category="Authorization" Priority="2" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="Role Manager Is Used for Roles Authorization Rather than Custom Code" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that&amp;nbsp;the ASP.NET Role Manager is used for role-based authorization&amp;nbsp;rather than&amp;nbsp;custom code.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;ASP.NET provides a role manager feature that automatically creates, manages and looks up roles for the authenticated user. Role managers reduce the possibilities&amp;nbsp;of serious security issues from programmer errors&amp;nbsp;as well as&amp;nbsp;reduce the amount of custom code needed for an application. &lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;Use the following steps to check if your application is using the Role Manager:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Check for the existence of the &amp;lt;&lt;strong&gt;roleManager&lt;/strong&gt;&amp;gt; element beneath the &amp;lt;&lt;strong&gt;system.web&lt;/strong&gt;&amp;gt; section of your application's Web.config file and make sure the &lt;strong&gt;enabled&lt;/strong&gt; attribute is set to &lt;strong&gt;true.&lt;/strong&gt; &lt;/li&gt;&lt;li&gt;Ensure there is a connection string in the &amp;lt;&lt;strong&gt;connectionStrings&lt;/strong&gt;&amp;gt; section that points to your roles store. &lt;/li&gt;&lt;li&gt;Ensure there is a specific provider configured in the &amp;lt;&lt;strong&gt;roleManager&lt;/strong&gt;&amp;gt;&lt;strong&gt; &lt;/strong&gt;element. &lt;/li&gt;&lt;li&gt;Check that the &lt;strong&gt;defaultProvider&lt;/strong&gt; attribute on the &amp;lt;&lt;strong&gt;roleManager&lt;/strong&gt;&amp;gt; element points to your chosen role provider. &lt;/li&gt;&lt;li&gt;Check your application's code and ensure it is using the Role Manager API (for example &lt;strong&gt;Roles.IsUserInRole &lt;/strong&gt;and &lt;strong&gt;Roles.CreateRole&lt;/strong&gt;) whenever a roles check takes place.&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;How to Fix&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;User authentication access checks &lt;/li&gt;&lt;li&gt;Role access from the configured role store by the &lt;strong&gt;RoleManager&lt;/strong&gt; HTTP module using the configured role provider &lt;/li&gt;&lt;li&gt;URL and file authorization &lt;/li&gt;&lt;li&gt;Programmatic role checks&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This order means that role information cannot be used for an unauthenticated user. It also means that role access can be used for URL and file authorization.&lt;/p&gt;&lt;p&gt;To use the role manager feature in an ASP.NET application, you need to do the following: &lt;/p&gt;&lt;ol&gt;&lt;li&gt;Add a &amp;lt;&lt;strong&gt;roleManager&lt;/strong&gt;&amp;gt; element beneath the &amp;lt;&lt;strong&gt;system.web&lt;/strong&gt;&amp;gt; section of your application's Web.config file and enable role manager by setting its &lt;strong&gt;enabled&lt;/strong&gt; attribute to &lt;strong&gt;true&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;Add a connection string to the &amp;lt;&lt;strong&gt;connectionStrings&lt;/strong&gt;&amp;gt; section to point to your roles store. If you are using the &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;, this is an LDAP query string pointing to your Authorization Manager Policy store in Active Directory or ADAM. If you are using the &lt;strong&gt;SqlRoleProvider&lt;/strong&gt;, this is a database connection string that points to your role store database. &lt;/li&gt;&lt;li&gt;Configure the specific provider in the &amp;lt;&lt;strong&gt;roleManager&lt;/strong&gt;&amp;gt;&lt;strong&gt; &lt;/strong&gt;element in your application's Web.config file. The role manager system supports the following providers: &lt;/li&gt;&lt;li&gt;If your application roles are in an Authorization Manager Policy store in Active Directory or ADAM, use the &lt;strong&gt;AuthorizationStoreRoleProvider&lt;/strong&gt;. &lt;/li&gt;&lt;li&gt;If your application roles are in a SQL Server database, use the &lt;strong&gt;SqlRoleProvider.&lt;/strong&gt; &lt;/li&gt;&lt;li&gt;If your application uses Windows groups as roles, use the &lt;strong&gt;WindowsTokenRoleProvider&lt;/strong&gt;. Note that this is recommended to be used with Windows Authentication only. &lt;/li&gt;&lt;li&gt;If your application roles are in a store other than those previously listed, create a custom roles provider inheriting &lt;strong&gt;RoleProvider&lt;/strong&gt; base class. &lt;/li&gt;&lt;li&gt;Set the &lt;strong&gt;defaultProvider&lt;/strong&gt; attribute on the &amp;lt;&lt;strong&gt;roleManager&lt;/strong&gt;&amp;gt; element to the chosen role provider. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To check roles and manage roles, use the Role Manager API (for example &lt;strong&gt;Roles.IsUserInRole &lt;/strong&gt;and &lt;strong&gt;Roles.CreateRole&lt;/strong&gt;). &lt;/p&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:86e905f3-25a9-438c-bdc6-5b242584be2a"&gt;Use ASP.NET Role Manager for Roles Authorization&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>