<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="bddea980-c4cd-41b1-a807-4cd2efe3957f" Author="" Category="Data Access" Priority="2" Rule_Type="Checklist Item" Status="" Technology="Java" title="All Database Input Is Validated" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that all input passed to the database is validated.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities&amp;nbsp;that would allow an attacker to gain unauthorized access to sensitive data.&lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;Use the following steps to check if all input passed to database is validated:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify database entry points. &lt;/strong&gt;Identify all locations within your application that interface with the database servers. Potential sources of input include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;URL based parameters &lt;/li&gt;&lt;li&gt;Form based parameters &lt;/li&gt;&lt;li&gt;Hidden fields &lt;/li&gt;&lt;li&gt;Cookies &lt;/li&gt;&lt;li&gt;Local filesystem &lt;/li&gt;&lt;li&gt;Javascript variables&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trace data from source to sink. &lt;/strong&gt;Trace each source of input from the immediate source, through your application and&amp;nbsp;to the backend database.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify validation routines. &lt;/strong&gt;Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure quality of validators. &lt;/strong&gt;Validation routines should check for length, range, format and type.&amp;nbsp;The validator&amp;nbsp;should first check for good data&amp;nbsp;via whitelisting and then for known malicious data&amp;nbsp;via blacklisting. Do not rely on client-side validation alone as it can be bypassed easily. For more information see Checklist Item: &lt;a href="ruledisplay:6D944640-22E7-421F-8192-45730D5118AB"&gt;Input is Validated for Length, Range, Format and Type&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure that parameterized queries are used. &lt;/strong&gt;Using the &lt;a href="ruledisplay:AA3B4801-99BA-43B0-90A6-D38A605E8574"&gt;Type Safe SQL Parameters are Used&lt;/a&gt; checklist, verify that all database transactions are handled using &lt;strong&gt;PreparedStatement&lt;/strong&gt; objects.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection. &lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;public void doGet(HttpServletRequest request,&lt;br&gt;     HttpServletResponse response) throws ServletException, IOException&lt;br&gt;{&lt;br&gt;     PrintWriter out = response.getWriter();&lt;br&gt;     String query = request.getParameter("query");&lt;br&gt;     String retData = "";&lt;br&gt;      // The application fails to validate the user-supplied&lt;br&gt;      // query before submitting it to the database server&lt;br&gt;     retData = queryDB(query);&lt;br&gt;      ...&lt;br&gt;     out.flush();&lt;br&gt;     out.close();&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;A tutorial on regular expressions is available at: &lt;a href="http://www.regular-expressions.info/"&gt;Regular-Expressions.info&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;For more information on using regular expression in Java, see: &lt;a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html"&gt;Class Pattern&lt;/a&gt; in Java SDK. &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Guideline&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:81491E66-67B7-49F3-BDA6-4B4C9245C702"&gt;Guideline: Validate All Input Passed to Database (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</content>
</guidanceItem>