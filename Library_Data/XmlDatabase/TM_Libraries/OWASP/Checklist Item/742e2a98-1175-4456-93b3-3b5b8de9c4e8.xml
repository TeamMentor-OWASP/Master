<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="742e2a98-1175-4456-93b3-3b5b8de9c4e8" Author="" Category="Deployment Considerations" Priority="2" Rule_Type="Checklist Item" Status="" Technology="ASP.NET 3.5" title="A Secure Key Storage Location Is Used" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that application keys are stored in a well defined location, such as the encrypted sections of the application's web.config or encrypted in the Windows Registry. Verify that they are not hard coded into the application or stored as plaintext inside configuration files.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;When faced with encryption, intruders attack the most vulnerable aspect: key management. Because keys are used to generate the encryption that protects sensitive data, the keys themselves become sensitive data that need to be protected. &lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;Use the following steps to verify a secure key storage location is used.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify the mechanism used for handling encryption keys.&lt;/strong&gt; The mechanism used should be either the Windows Registry or the application's web.config file. Ensure that your application is using the most appropriate mechanism. If the storage locations for keys are not properly documented, look for encryption functions in the code and trace the key material back to see where it is stored, both temporarily and permanently. If you do have documentation, check that the code conforms to the documentation. When tracing through code, ensure that you look at the entire lifetime of the key in the system; keys may be written out insecurely after they are used, even if the path from a secure initial source to use is correct.&lt;/p&gt;&lt;p&gt;If you store your application's encryption keys into the Windows Registry, ensure that DPAPI is used to protect them. The following code gives an example of how this can be done:&lt;/p&gt;&lt;pre&gt;encKey = ProtectedData.Protect(encKey, salt, DataProtectionScope.CurrentUser);&lt;br&gt;RegistryKey rk = Registry.LocalMachine.OpenSubKey("SOFTWARE\\MyApp\\KeyStore", true);&lt;br&gt;rk.SetValue("encKey", wBuff, RegistryValueKind.Binary);&lt;/pre&gt;&lt;p&gt;If you store your application's encryption keys into web.config, ensure that they are stored into the &lt;strong&gt;appSettings&lt;/strong&gt; section. Use the &lt;strong&gt;aspnet_regiis&lt;/strong&gt; utility to check that the &lt;strong&gt;appSettings&lt;/strong&gt; section is encrypted. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure the key store is protected.&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Ensure that either DPAPI or ASP.NET protected configuration files are being used. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Verify that the appropriate permissions are set on the configuration files and registry keys so they can be only accessed by your application and its administrators. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Verify that only the application and its administrators can access the IIS metabase.&lt;br&gt;Access to the metabase is controled with ACLs, similar to normal files or registry keys. Verify that only authorized accounts are listed in the &amp;lt;CODE&amp;gt;BUILTIN\Administrators&amp;lt;/CODE&amp;gt; group and that other ACLs are properly set up.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify the application securely handles keys.&lt;/strong&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Ensure that keys are not hard coded into the source code. When tracing back from an encryption or signing operation, if you see private key material included literally in the body of an application's source code, you have&amp;nbsp;found a hard-coded key&amp;nbsp;that needs to be moved to a protected keystore.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Ensure that keys are not placed into unprotected configuration files. If a private key is read from a configuration file and the aspnet_regiis utility (or manual inspection) show that it is not encrypted, the key needs to be moved to a protected key store.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Ensure that keys are unloaded from memory after use. If keys are left in memory instead of being cleared out when no longer needed, or if they are written to any form of temporary storage without protection, they are vulnerable to theft from memory or from the insecure store. Checking the entire lifetime of key material is important for finding this class of problem.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following code shows a hard-coded encryption key inside the application. A determined attacker will be able to compromise the key&amp;nbsp;after gaining&amp;nbsp;access to the source code:&lt;/p&gt;&lt;pre&gt;byte[] salt = MyApp.Crypto.GenerateSalt();&lt;br&gt;string secretString = "application's encryption key";&lt;br&gt;HMACSHA512 md = new HMACSHA512(salt);md.Initialize();&lt;br&gt;byte[] rawKey = md.ComputeHash(Encoding.ASCII.GetBytes(secretString));&lt;br&gt;md.Clear();&lt;br&gt; Rijndael encMD = Rijndael.Create();&lt;br&gt;encMD.Key = rawKey;encMD.IV = salt;&lt;br&gt;ICryptoTransform encCT = encMD.CreateEncryptor();&lt;/pre&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;For more information about the securing the IIS Metabase, see &lt;a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/html/3b227030-f79d-4426-b1c0-b5b72e49c9fd.asp"&gt;Metabase Security&lt;/a&gt;&amp;nbsp;on MSDN.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Guideline&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:440137A2-948A-4485-A137-E3CC8207F801"&gt;Guideline: Use a Secure Key Storage Location (ASP.NET)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>