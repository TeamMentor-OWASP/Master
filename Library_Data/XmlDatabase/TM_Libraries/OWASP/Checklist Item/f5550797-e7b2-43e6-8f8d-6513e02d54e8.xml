<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="f5550797-e7b2-43e6-8f8d-6513e02d54e8" Author="" Category="Input and Data Validation" Priority="1" Rule_Type="Checklist Item" Status="" Technology="Java" title="Application Does Not Rely Only on Client-Side Validation" Topic="Security" phase="Design" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;br&gt;&lt;br&gt;&lt;h1&gt;What to Check For&lt;/h1&gt;&lt;p&gt;Ensure that all input validation is performed on the server. Client-side validation should only be used for performance and usability reasons. &lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Client-side validation is executed by the client and can be easily bypassed. Client side validation is a major design problem when it appears in web applications. It places trust in the browser, an entity that should never be trusted.&lt;/p&gt;&lt;h1&gt;How to Check&lt;/h1&gt;&lt;p&gt;An application can take input via various ways such as a web interface, database, file system or other software running on the server. Use the following steps to establish a validation strategy:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify all sources of input. &lt;/strong&gt;During design time, identify all of the potential input sources to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. The most common sources are: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;URL based parameters &lt;/li&gt;&lt;li&gt;Form based parameters &lt;/li&gt;&lt;li&gt;Hidden fields &lt;/li&gt;&lt;li&gt;Cookies &lt;/li&gt;&lt;li&gt;HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) &lt;/li&gt;&lt;li&gt;Local filesystem &lt;/li&gt;&lt;li&gt;Database &lt;/li&gt;&lt;li&gt;Other services running on the system &lt;/li&gt;&lt;li&gt;Javascript variables &lt;/li&gt;&lt;li&gt;File upload and attributes (filename, size, data, etc) &lt;/li&gt;&lt;li&gt;DNS results or host names &lt;/li&gt;&lt;li&gt;External component call return values (COM, AJAX, ActiveX) &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify validation routines. &lt;/strong&gt;Each input source should have a server side validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base and may be located in a single component.&lt;/p&gt;&lt;p&gt;Validation may be identified by any of the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Custom Java Validator class &lt;/li&gt;&lt;li&gt;Regular expression use (&lt;strong&gt;java.util.regex&lt;/strong&gt;) &lt;/li&gt;&lt;li&gt;Method names that contain &lt;strong&gt;validate&lt;/strong&gt; or &lt;strong&gt;validator&lt;/strong&gt; &lt;/li&gt;&lt;li&gt;Client-side validation is often linked to events: &lt;ul&gt;&lt;li&gt;onSubmit &lt;/li&gt;&lt;li&gt;onChange &lt;/li&gt;&lt;li&gt;onFocus &lt;/li&gt;&lt;li&gt;onBlur &lt;/li&gt;&lt;li&gt;onKeyDown/Press/Up&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ensure validators run on the server. &lt;/strong&gt;At a minimum, validation routines should run on the server. Server-side validation guarantees that malformed input will be caught and discarded regardless of the state that the client is in. As an optional feature, validation can also be implemented client side in order to improve application performance and user experience.&lt;br&gt;&lt;br&gt;Server-side validation is done within the application code and ideally the validation will occur as soon as the input reaches your application. In web applications, look for application-supplied validators, such as a Custom Java Validator, to validate and constrain input after it is received from an input source, such as a &lt;strong&gt;GET&lt;/strong&gt; parameter. Check for the use of regular expressions and &lt;strong&gt;java.util.regex&lt;/strong&gt;, or the use of a validator that checks numeric ranges.&lt;/p&gt;Client-side Example: &lt;blockquote&gt;&lt;pre&gt;//The validation function is defined in JavaScript in the client-side form&lt;br&gt;&amp;lt;script language="JavaScript"&amp;gt; function validate()&lt;br&gt;{&lt;br&gt; ...&lt;br&gt;}&lt;br&gt;&amp;lt;/script&amp;gt;&lt;br&gt;...&lt;br&gt;// The application uses validation in the client-side form to validate the input&lt;br&gt;&amp;lt;form method="post"&lt;br&gt; action="/myapp/aggregate"&lt;br&gt; onsubmit="return validate()"&amp;gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;Server-side Example:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;//The input "searchTerm" is received from a request&lt;br&gt;String searchTerm = request.getParameter("index");&lt;br&gt;...&lt;br&gt;// The application uses validation in the application code to validate the input&lt;br&gt;if (validateSearchTerm(searchTerm))&lt;br&gt;{&lt;br&gt;      ...&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following code produces a data analysis based on a financial index. Unfortunately, the user's input is validated only on the client side via a JavaScript routine. Since there is no validation on the server, an attacker can bypass all validation and exploit cross-site scripting and SQL injection vulnerabilities.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;&amp;lt;!-- Filename: idv01.html --&amp;gt;&lt;br&gt;&amp;lt;html&amp;gt;&lt;br&gt;  &amp;lt;head&amp;gt;&lt;br&gt;    &amp;lt;!-- The page uses client-side validation only --&amp;gt;&lt;br&gt;    &amp;lt;script language="JavaScript"&amp;gt;&lt;br&gt;&amp;lt;!--function validate()&lt;br&gt;{&lt;br&gt;   var idx = document.forms[0].elements[0].value;&lt;br&gt;   var regex = new RegExp("[a-zA-Z0-9]+");&lt;br&gt;   var match = regex.exec(idx);&lt;br&gt;   var ret = false;&lt;br&gt;   if(idx.length &amp;lt; 9 &amp;amp;&amp;amp; match != null)&lt;br&gt;   {&lt;br&gt;      ret = true;&lt;br&gt;   }&lt;br&gt;   else&lt;br&gt;   {&lt;br&gt;      alert("Invalid index!");&lt;br&gt;   }&lt;br&gt;    return ret;&lt;br&gt;}&lt;br&gt;// --&amp;gt;&lt;br&gt;    &amp;lt;/script&amp;gt;&lt;br&gt;    &amp;lt;title&amp;gt;Query for index&amp;lt;/title&amp;gt;&lt;br&gt;  &amp;lt;/head&amp;gt;&lt;br&gt;  &amp;lt;body&amp;gt;&lt;br&gt;    &amp;lt;!-- The application relies on client-side validation --&amp;gt;&lt;br&gt;    &amp;lt;form method="post" action="/myapp/aggregate" onsubmit="return validate()"&amp;gt;&lt;br&gt;      index:&amp;amp;nbsp;&amp;lt;input name="index" type="text" size="10"&amp;gt;&lt;br&gt;                  &amp;lt;input name="submit" value="query" type="submit"&amp;gt;&lt;br&gt;    &amp;lt;/form&amp;gt;&lt;br&gt;  &amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;br&gt;&lt;br&gt;//&lt;br&gt;Filename: /myapp/aggregateimport java.io.*;&lt;br&gt;import java.util.*;&lt;br&gt;import java.lang.*;&lt;br&gt;import javax.servlet.*;&lt;br&gt;import javax.servlet.http.*;&lt;br&gt;import java.util.regex.*;&lt;br&gt;public final class DataAggregator extends HttpServlet&lt;br&gt;{&lt;br&gt;      public void doGet(HttpServletRequest request, HttpServletResponse response)&lt;br&gt;            throws ServletException, IOException&lt;br&gt;      {&lt;br&gt;            PrintWriter out = response.getWriter();&lt;br&gt;            String searchTerm = request.getParameter("index");&lt;br&gt;             try&lt;br&gt;            {&lt;br&gt;                  String retString;&lt;br&gt;                  retString = "The queried index \"";&lt;br&gt;                  retString += encodeHtml(searchTerm);&lt;br&gt;                  retString += "\" produced the following results:&amp;lt;br&amp;gt; ";&lt;br&gt;                  out.println(retString);&lt;br&gt;                  // The application does not provide a server-side validation&lt;br&gt;                  aggregateData(out, searchTerm);&lt;br&gt;            }&lt;br&gt;             catch (Exception e)&lt;br&gt;            {&lt;br&gt;                  // Add the appropriate logging and exception handling&lt;br&gt;                  // mechanisms. Consult the Exception Handling and&lt;br&gt;                  // Logging sections&lt;br&gt;                  out.println("We cannot handle your request at the moment."&lt;br&gt;                           + " Please try again later.");&lt;br&gt;            }&lt;br&gt;             out.flush();&lt;br&gt;             out.close();&lt;br&gt;      }&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Related Guideline&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:D6593992-DC9E-42C5-9E98-30E8EF075B93"&gt;Guideline: Do Not Rely on Client-Side Validation (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</content>
</guidanceItem>