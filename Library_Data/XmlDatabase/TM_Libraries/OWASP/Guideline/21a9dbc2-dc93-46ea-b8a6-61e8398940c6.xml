<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="21a9dbc2-dc93-46ea-b8a6-61e8398940c6" Author="" Category="Unmanaged Code" Priority="2" Rule_Type="Guideline" Status="" Technology="Java" title="Validate All Data Passed Between Native And Java Code" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;Applies to&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Applications written using Servlets or JSP.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;What to Do&lt;/h1&gt;&lt;p&gt;Validate all data that is passed between Java code and native code.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Unchecked input and/or output can lead to buffer overflows, injection based attacks such as SQL injection and cross-site scripting, etc., that can&amp;nbsp;exploit weaknesses in the application.&lt;/p&gt;&lt;h1&gt;When&lt;/h1&gt;&lt;p&gt;Your application should always verify data that is passed between native code and Java.&lt;/p&gt;&lt;h1&gt;How&lt;/h1&gt;&lt;p&gt;There are several things to consider when validating input/output between native and Java code: &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Check language barriers. &lt;/strong&gt;Distinguishing&amp;nbsp;the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary&amp;nbsp;between&amp;nbsp;where the Java sandbox ends and the compiled code begins&amp;nbsp;to interact&amp;nbsp;directly with the CPU, so you can&amp;nbsp;compensate for&amp;nbsp;the lack of such checks inside the native code.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Validate for length, range, format and type. &lt;/strong&gt;After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Construct a set of validators. &lt;/strong&gt;Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators.&lt;/p&gt;&lt;p&gt;Consult with the &lt;a href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559"&gt;Validate Input for Length, Range, Format, and Type&lt;/a&gt; guideline for more details.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following segment shows a JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;#include &amp;lt;jni.h&amp;gt;&lt;br&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;br&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;br&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br&gt;#include &amp;lt;atlbase.h&amp;gt;&lt;br&gt;#include &amp;lt;windows.h&amp;gt;&lt;br&gt;#include &amp;lt;wtypes.h&amp;gt;&lt;br&gt;JNIEXPORT jboolean&lt;br&gt;JNICALL Java_Identifier_invokeObject&lt;br&gt;      (JNIEnv * env, jobject jobj, jstring jguid)&lt;br&gt;{&lt;br&gt;      HRESULT result;&lt;br&gt;      CLSID clsid;&lt;br&gt;      IUnknown *pIunkn;&lt;br&gt;      LPWSTR guid;&lt;br&gt;      jboolean iscopy;&lt;br&gt;      jboolean ret = false;&lt;br&gt;      char* temp_guid = (*env)-&amp;gt;GetStringUTFChars(env, jguid, &amp;amp;iscopy);&lt;br&gt;      //The application fails to verify that the GUID is valid&lt;br&gt;      guid = SysAllocStringLen(0, 38);&lt;br&gt;      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);&lt;br&gt;      result = GUIDFromString(guid, &amp;amp;clsid);&lt;br&gt;       ...&lt;br&gt;       return ret;&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Solution Example&lt;/h1&gt;&lt;p&gt;The following segment shows a JNI code that utilizes a COM object. Because the passed input is validated as being a GUID, the application reduces the risk of unhandled exceptions.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;#include &amp;lt;jni.h&amp;gt;&lt;br&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;br&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;br&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br&gt;#include &amp;lt;atlbase.h&amp;gt;&lt;br&gt;#include &amp;lt;windows.h&amp;gt;&lt;br&gt;#include &amp;lt;wtypes.h&amp;gt;  &lt;br&gt;JNIEXPORT jboolean &lt;br&gt;JNICALL Java_Identifier_invokeObject&lt;br&gt;      (JNIEnv * env, jobject jobj, jstring jguid)&lt;br&gt;{&lt;br&gt;      HRESULT result;&lt;br&gt;      CLSID clsid;&lt;br&gt;      IUnknown *pIunkn;&lt;br&gt;      LPWSTR guid;&lt;br&gt;      jboolean iscopy;&lt;br&gt;      jboolean ret = false;&lt;br&gt;      char* temp_guid = (*env)-&amp;gt;GetStringUTFChars(env, jguid, &amp;amp;iscopy);&lt;br&gt;      // The application verifies that the input matches the criteria for a GUID&lt;br&gt;      if(!validGUID(temp_guid))&lt;br&gt;      {&lt;br&gt;            return ret;&lt;br&gt;      }&lt;br&gt;      guid = SysAllocStringLen(0, 38);&lt;br&gt;      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);&lt;br&gt;      result = GUIDFromString(guid, &amp;amp;clsid);&lt;br&gt;       ...&lt;br&gt;      return ret;&lt;br&gt;}&lt;br&gt; bool validGUID(char *guid)&lt;br&gt;{&lt;br&gt;      // Check that GUID is of right length&lt;br&gt;      if(strlen(guid) != 38) return false;&lt;br&gt;      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70&lt;br&gt;}&lt;br&gt;      if(guid[0]  != '{') return false;&lt;br&gt;      if(guid[9]  != '-') return false;&lt;br&gt;      if(guid[14] != '-') return false;&lt;br&gt;      if(guid[19] != '-') return false;&lt;br&gt;      if(guid[24] != '-') return false;&lt;br&gt;      if(guid[37] != '}') return false;&lt;br&gt;      int i=1;&lt;br&gt;      while(i&amp;lt;37)&lt;br&gt;      {&lt;br&gt;            if((guid[i] &amp;gt;= 'a' &amp;amp;&amp;amp; guid[i] &amp;lt;= 'f')&lt;br&gt;                  || (guid[i] &amp;gt;= 'A' &amp;amp;&amp;amp; guid[i] &amp;lt;= 'F')&lt;br&gt;                  || (guid[i] &amp;gt;= '0' &amp;amp;&amp;amp; guid[i] &amp;lt;= '9')&lt;br&gt;            {&lt;br&gt;                  // GUID is valid&lt;br&gt;            }&lt;br&gt;            else&lt;br&gt;            {&lt;br&gt;                  return false;&lt;br&gt;            }&lt;br&gt;            i++;&lt;br&gt;            if(i == 9 || i == 14 || i == 19 || i == 24)&lt;br&gt;            {&lt;br&gt;                  i++;&lt;br&gt;            }&lt;br&gt;      }&lt;br&gt;       return true;&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;To learn more about JNI, see: &lt;a href="http://java.sun.com/j2se/1.3/docs/guide/jni/spec/jniTOC.doc.html"&gt;Java Native Interface Specification&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;For more information about the security issues that JNI introduces, see: &lt;a href="http://www.owasp.org/index.php/Unsafe_JNI"&gt;Unsafe JNI&lt;/a&gt; from OWASP. &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559"&gt;Guideline: Validate Input for Length, Range, Format, and Type (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:935E30F8-67B9-4E5B-B6F6-18644DD62B3E"&gt;Guideline: Minimize the Number of Times Language Boundaries are Crossed (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:37CE275C-4A57-42D1-904B-2262A7DA1AA2"&gt;Attack: Format String Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:B86F003F-DB0C-41D4-B31A-F9AE1BF7C9C1"&gt;Attack: Deserialization of Untrusted Data Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:208A476B-ABCA-4630-9D02-746C52F47017"&gt;Attack: XML Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:C7AC7D00-4AEA-4AFA-AD2D-1E812664BA38"&gt;Attack: Canonicalization Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:092BC54D-5A7F-451F-9EB1-AB0A1F1708C0"&gt;Attack: LDAP Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1D4FA7AF-33F0-40D9-9665-A31DBF3D7764"&gt;Attack: SQL Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:B9DD25F1-3C5C-40DD-A82E-464D0C02C14D"&gt;Attack: Command Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:41BACAD4-8875-4F83-A9F6-C2263B23ABC4"&gt;Attack: File Name and Path Manipulation Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1CCC080F-9290-4BD2-8A2C-6A45F59727B0"&gt;Attack: Xpath-XQuery Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:198CBDAF-3F87-4291-870D-8B6F077D8D36"&gt;Attack: AJAX Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:D47CF578-0D27-4F11-B594-C508E50982B5"&gt;Checklist Item: All Data Passed Between Native and Java Code is Validated (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</content>
</guidanceItem>