<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="320f3578-7231-41d3-be4b-db79957bd496" Author="" Category="Input and Data Validation" Priority="1" Rule_Type="Guideline" Status="" Technology="ASP.NET 3.5" title="Do Not Rely on Request Validation" Topic="Security" phase="Design" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Do&lt;/h1&gt;&lt;p&gt;Do not rely on the ASP.NET request validation feature to detect all bad input. Use it only as an extra precautionary measure in addition to your own input validation.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;The ASP.NET request validation feature only performs basic input validation and should not be relied upon to detect all types of malicious data. It is not sufficient even for preventing attacks like cross site scripting and SQL injection, and each application has specific validation needsâ€”what is good input to one application may be bad input for another.&lt;/p&gt;&lt;h1&gt;When&lt;/h1&gt;&lt;p&gt;When user input is submitted from a webpage back to the server.&lt;/p&gt;&lt;h1&gt;How&lt;/h1&gt;&lt;p&gt;Request validation is enabled by default. You can see this by examining the &lt;strong&gt;validateRequest&lt;/strong&gt; attribute, which is set to true on the &lt;strong&gt;&amp;lt;pages&amp;gt;&lt;/strong&gt; element in the &lt;strong&gt;Machine.config.comments &lt;/strong&gt;file. This will automatically try to validate all input submitted to the web application. Ensure that it is enabled for all pages except those that need to accept a range of HTML elements. If you need to disable it for a page, set the &lt;strong&gt;ValidateRequest&lt;/strong&gt; attribute to &lt;strong&gt;false&lt;/strong&gt; by using the &lt;strong&gt;@Page&lt;/strong&gt; directive as follows:&lt;/p&gt;&lt;pre&gt;&amp;lt;%@ Page Language="C#" ValidateRequest = "false" %&amp;gt;&lt;/pre&gt;&lt;p&gt;This feature can also be called explicitly by the server by using the &lt;strong&gt;Request.ValidateInput()&lt;/strong&gt; call.&lt;/p&gt;&lt;p&gt;Remember, whether using the page directive to automatically validate or calling &lt;strong&gt;Request.ValidateInput() &lt;/strong&gt;explicitly, our aim is to only use this feature as an added precaution. In order to ensure that you are handling user data correctly, ensure that you are following all of these steps: &lt;/p&gt;&lt;ol&gt;&lt;li&gt;Always validate input as strictly as possible against the expected input format via regular expressions. See the guideline &lt;a href="ruledisplay:D06E3B85-CCD8-41EC-8861-36D30BBAE909"&gt;Validate Input for Length, Range, Format, and Type&lt;/a&gt; to learn how to do this effectively. &lt;/li&gt;&lt;li&gt;Ensure that all queries are fully parameterized, especially if they use user input. See &lt;a href="ruledisplay:3437DF81-6B8C-4A14-BB6E-34F6EE21C45F"&gt;Use Type Safe SQL Parameters When Constructing SQL Queries&lt;/a&gt; to learn how to do so. &lt;/li&gt;&lt;li&gt;Do not make any security decisions based on user input. To learn how to do so, refer to the guideline &lt;a href="ruledisplay:179C1FD4-A8DA-466B-81EF-202DF7561536"&gt;Do Not Make Security Decisions Based on Client-Accessible Parameters&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;Do not allow users to input filenames or paths. See the guideline &lt;a href="ruledisplay:897EEB0A-23C9-4699-A400-925FFC32C11E"&gt;Filter All User-Supplied Filename and Path Input&lt;/a&gt; to learn how to do so.&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;In this example which uses an online shopping cart. The cart component consists of two components:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;An HTML form that contains all of the fields that make up the order to be submitted for processing:&lt;/p&gt;&lt;pre&gt;&amp;lt;html&amp;gt;&lt;br&gt;  &amp;lt;head&amp;gt;&lt;br&gt;    &amp;lt;title&amp;gt;Widget shopping cart&amp;lt;/title&amp;gt;&lt;br&gt;  &amp;lt;/head&amp;gt;&lt;br&gt;  &amp;lt;body&amp;gt;&lt;br&gt;    &amp;lt;H1&amp;gt;welcome to the most boring shopping cart on the web!&amp;lt;/H1&amp;gt;&lt;br&gt;     A widget's current price is $19.95 USD. Please use the following form to submit an order.&lt;br&gt;    &amp;lt;form action="process_order.aspx" method="POST"&amp;gt;&lt;br&gt;       &amp;lt;p&amp;gt;Please enter the number of widgets you would like to purchase:&amp;lt;/p&amp;gt;&lt;br&gt;       quantity:&amp;lt;br/&amp;gt;&lt;br&gt;       &amp;lt;select name="WidgetQuantity"&amp;gt;&lt;br&gt;        &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;&lt;br&gt;      &amp;lt;/select&amp;gt;&lt;br&gt;      ...&lt;br&gt;      &amp;lt;input type="submit" value="order"/&amp;gt;&lt;br&gt;    &amp;lt;/form&amp;gt;&lt;br&gt;  &amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An ASP.NET page that relies on the request validation feature and processes the form submissions and performs the necessary steps to create the order.&lt;/p&gt;&lt;pre&gt;......&lt;br&gt;try&lt;br&gt;{&lt;br&gt;   Request.ValidateInput();&lt;br&gt;}&lt;br&gt;catch(HttpRequestValidationException e)&lt;br&gt;{&lt;br&gt;   //error out&lt;br&gt;}&lt;br&gt;int dQuantity = Request("WidgetQuantity");&lt;br&gt;double dPrice = 19.95;&lt;br&gt;double dCost = dQuantity * dPrice;&lt;br&gt;......&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This server side page is problematic because it solely relies on the ASP.NET request validation feature. The application works fine in the case where a user plays by the rules and submits the form as it is shown, because the quantity field ensures that the range constraints for the order quantity are always valid. However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs later on.&lt;/p&gt;&lt;h1&gt;Solution Example&lt;/h1&gt;&lt;p&gt;Consider the following ASP.NET page that processes the form submissions and performs the necessary steps to create an order:&lt;/p&gt;&lt;pre&gt;&amp;lt;%@ Page Language="vb" %&amp;gt;&lt;br&gt;&amp;lt;script runat=server&amp;gt;public sub OnSubmit(source as Object, e as EventArgs)&lt;br&gt;    if Page.IsValid then&lt;br&gt;        ' Now we can perform our transaction.&lt;br&gt;        int dQuantity = Request("WidgetQuantity");&lt;br&gt;        double dPrice = 19.95;&lt;br&gt;        double dCost = dQuantity * dPrice;&lt;br&gt;    end if&lt;br&gt;end sub&lt;br&gt;&amp;lt;/script&amp;gt;&lt;br&gt;&amp;lt;html&amp;gt;&lt;br&gt;&amp;lt;head&amp;gt;&lt;br&gt;&amp;lt;title&amp;gt;Validation Sample&amp;lt;/title&amp;gt;&lt;br&gt;&amp;lt;/head&amp;gt;&lt;br&gt;&amp;lt;body&amp;gt;&lt;br&gt;&amp;lt;form runat=server&amp;gt;&lt;br&gt;&amp;lt;asp:ValidationSummary runat=server headertext="There were errors on the page:" /&amp;gt;&lt;br&gt;&amp;lt;table&amp;gt;&lt;br&gt;  &amp;lt;tr&amp;gt;&lt;br&gt;    &amp;lt;td&amp;gt;&lt;br&gt;        &amp;lt;asp:RequiredFieldValidator runat=server&lt;br&gt;             controltovalidate="WidgetQuantity"&lt;br&gt;             errormessage="WidgetQuantity is required."&amp;gt;&lt;br&gt;        &amp;lt;/asp:RequiredFieldValidator&amp;gt;&lt;br&gt;    &amp;lt;/td&amp;gt;&lt;br&gt;    &amp;lt;td&amp;gt;A widget's current price is $19.95 USD. Please use the following form to submit an order.&amp;lt;/td&amp;gt;&lt;br&gt;    &amp;lt;td&amp;gt;&lt;br&gt;      &amp;lt;select name="WidgetQuantity"&amp;gt;&lt;br&gt;        &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;&lt;br&gt;        &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;&lt;br&gt;      &amp;lt;/select&amp;gt;&lt;br&gt;     &amp;lt;asp:RegularExpressionValidator runat=server display=dynamic&lt;br&gt;            controltovalidate="WidgetQuantity"&lt;br&gt;            errormessage="WidgetQuantity must be a non-zero, positive integer." &lt;br&gt;            validationexpression="[1-9]{1}[0-9]{0,7}" /&amp;gt;&lt;br&gt;    &amp;lt;/td&amp;gt;&lt;br&gt;  &amp;lt;/tr&amp;gt;&lt;br&gt;...&lt;br&gt;&amp;lt;/table&amp;gt;&lt;br&gt;&amp;lt;br&amp;gt;&lt;br&gt;&amp;lt;input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit&amp;gt;&lt;br&gt;&amp;lt;/form&amp;gt;&lt;br&gt;&amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;p&gt;The ASP.NET Validator control provides client-side validation to reduce roundtrips to the server and improve user experience, but also provides server-side validation to ensure that the widget quantity field is a positive integer. It is also validated as a required field that must be provided before submitting the order.&lt;/p&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:58F9B51D-794F-4CFC-B568-7F5E55DEB402"&gt;Guideline: Do Not Rely on Client-Side Validation &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:D06E3B85-CCD8-41EC-8861-36D30BBAE909"&gt;Guideline: Validate Input for Length, Range, Format, and Type &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:3437DF81-6B8C-4A14-BB6E-34F6EE21C45F"&gt;Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:179C1FD4-A8DA-466B-81EF-202DF7561536"&gt;Guideline: Do Not Make Security Decisions Based on Client-Accessible Parameters&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:897EEB0A-23C9-4699-A400-925FFC32C11E"&gt;Guideline: Filter All User-Supplied Filename and Path Input&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1AB38C50-F31D-4CD8-89B1-CE397E6895E8"&gt;Guideline: Encode All Output Data&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:BC10DCE2-CA48-44BF-8BF6-FEFBE8DCCB7E"&gt;Attack: Cross Site Scripting Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1D4FA7AF-33F0-40D9-9665-A31DBF3D7764"&gt;Attack: SQL Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:044B9F0A-6A95-442C-BF24-3F890D0B10EF"&gt;Attack: Client-side Validation Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:208A476B-ABCA-4630-9D02-746C52F47017"&gt;Attack: XML Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:198CBDAF-3F87-4291-870D-8B6F077D8D36"&gt;Attack: AJAX Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:2B17E816-C6C4-4B05-BE92-01DC71073F66"&gt;Attack: Response Splitting Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1CCC080F-9290-4BD2-8A2C-6A45F59727B0"&gt;Attack: Xpath-XQuery Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:092BC54D-5A7F-451F-9EB1-AB0A1F1708C0"&gt;Attack: LDAP Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:685CA8C0-E102-4517-A539-4B826D1962EB"&gt;Attack: Double Encoding Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:B9DD25F1-3C5C-40DD-A82E-464D0C02C14D"&gt;Attack: Command Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:41BACAD4-8875-4F83-A9F6-C2263B23ABC4"&gt;Attack: File Name and Path Manipulation Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:C7AC7D00-4AEA-4AFA-AD2D-1E812664BA38"&gt;Attack: Canonicalization Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:A50EAF02-034A-491B-A340-557BE0681C48"&gt;Checklist Item: Request Validation is Not Relied on &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>