<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="dbdd2fbe-4ecb-4bf5-9272-5f244ea26663" Author="" Category="Communication Security" Priority="2" Rule_Type="Guideline" Status="" Technology="Java" title="Encrypt Communication Links" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;Applies to&lt;/h1&gt;&lt;p&gt;Applications written using Servlets or JSP.&lt;/p&gt;&lt;h1&gt;What to Do&lt;/h1&gt;&lt;p&gt;Encrypt the communication channels when interacting with other software across the network.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Encrypting the communication links allows the application to preserve the confidentiality and integrity of the transmitted data. &lt;/p&gt;&lt;h1&gt;When&lt;/h1&gt;&lt;p&gt;If sensitive data must be transmitted between two hosts, either&amp;nbsp;between servers or between application and server, then encrypt the communication links.&lt;/p&gt;&lt;h1&gt;How&lt;/h1&gt;&lt;p&gt;To encrypt the communication links:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify the connections used for transmitting sensitive data. &lt;/strong&gt;Enumerate all connections between the different servers with other servers or with the application. Identify the sensitive data that is sent over the network and the respective connections that are used for such communication.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose the appropriate encryption mechanism. &lt;/strong&gt;Depending on the infrastructure, you may consider using IPSec or TLS/SSL.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;IPSec:&lt;/strong&gt; IPSec is used when the encryption needs to be applied across all involved parties. Since IPSec is designed to secure connections between static hosts that are "always on," use IPSec to secure the network connections between your application's servers. Due to its nature, IPSec requires low level support; therefore0, your application would need support from the operating system or a JNI component to manage it. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;TLS/SSL:&lt;/strong&gt; TLS/SSL provides a granular protection which&amp;nbsp;allows only&amp;nbsp;the traffic containing sensitive data to be encrypted. Because TLS/SSL has a certificate based design, it allows the protection of data between mobile hosts. Use TLS/SSL to secure the communication channel between your application and its users.&lt;br&gt;&lt;br&gt;While Java provides APIs for handling SSL encrypted traffic, it is recommended to follow the manuals associated with the&amp;nbsp;third party software that&amp;nbsp;is being used. For example, if your application connects to a database server, follow the database server's manual on setting up the encryption; if your application is web-oriented, follow the web server's documentation on setting up the SSL certificate. If your application uses SSL, ensure that you use SSL 3.0 and disable the cryptographically weak SSL 2.0 protocols.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apply the appropriate encryption mechanism. &lt;/strong&gt;Apply the encryption mechanism of choice at the appropriate locations in the code. Such locations include all functionality that establishes a connection between your application and another entity.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following code establishes a connection between&amp;nbsp;two servers. Unfortunately, the communication is not encrypted; therefore, it is possible for an attacker to eavesdrop on the connection.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;String remoteHost = "server02.example.com";&lt;br&gt;int remotePort = "1337";&lt;br&gt; &lt;br&gt;Socket sock = new Socket(remoteHost, remotePort);&lt;br&gt;InputStreamReader isr = new InputStreamReader(sock.getInputStream());&lt;br&gt;BufferedReader input = new BufferedReader(isr);&lt;br&gt;PrintWriter output = new PrintWriter(sock.getOutputStream(), true);&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Solution Example&lt;/h1&gt;&lt;p&gt;The following code establishes a connection between&amp;nbsp;two servers. Because the communication is encrypted, the confidentiality of the data in transit is preserved; therefore, it is impossible for an attacker to eavesdrop on the connection.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;String remoteHost = "server02.example.com";&lt;br&gt;int remotePort = "1337";&lt;br&gt; &lt;br&gt;SSLSocketFactory sslSF = (SSLSocketFactory)SSLSocketFactory.getDefault();&lt;br&gt;SSLSocket sslSock = (SSLSocket) sslSF.createSocket(remoteHost, remotePort);&lt;br&gt; &lt;br&gt;InputStreamReader isr = new InputStreamReader(sslSock.getInputStream());&lt;br&gt;BufferedReader input = new BufferedReader(isr);&lt;br&gt;PrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;For more information about TLS, see: RFC for &lt;a href="http://www.faqs.org/rfcs/rfc2246.html"&gt;Transport Layer Security&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;For more information about Java SSL sockets, see: Documentation for &lt;a href="http://download.oracle.com/javase/1.4.2/docs/api/javax/net/ssl/SSLSocket.html"&gt;Class SSLSocket&lt;/a&gt; in Java SDK. &lt;/li&gt;&lt;li&gt;To learn about the JSSE API, see: &lt;a href="http://download.oracle.com/javase/1.4.2/docs/guide/security/jsse/JSSERefGuide.html"&gt;Java Secure Socket Extension (JSSE) Reference Guide&lt;/a&gt; available from Oracle. &lt;/li&gt;&lt;li&gt;For a tutorial about using the JSSE API, see: &lt;a href="http://www.javaworld.com/javaworld/jw-05-2001/jw-0511-howto.html"&gt;Build secure network applications with SSL and the JSSE API&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;For a quick overview on IPSec, see: A publication on &lt;a href="http://www.digisafe.com/products/pdf/IPSec_Primer.pdf"&gt;IPSec Primer&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:024B6044-7C89-436C-8111-1B6FAE7298AC"&gt;Guideline: Protect Sensitive Data Over the Network (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:ED6F49C0-E021-459E-AE4F-9116CA8E8073"&gt;Guideline: Use SSL When Transmitting Credentials (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:48BB4D3A-9295-4263-B3E7-090E483DEC5D"&gt;Attack: Man in the Middle Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:4572037A-2166-4AD1-8E73-D623E468A7B9"&gt;Attack: Information Disclosure Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:CBB29250-7ED3-4FDD-9B28-E3EE07EAF911"&gt;Attack: HTTP Replay Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:DEBB5734-39D0-4922-BDEE-1E0547E22DAD"&gt;Attack: Chosen Plaintext Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:3B657A67-F660-4DB5-9267-6E0FE2DAA1EB"&gt;Attack: Chosen Ciphertext Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:13EE90D9-B0F6-45D6-913A-BA8527525A04"&gt;Attack: Traffic Analysis Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:24D078E3-A02F-4EDF-A6EA-DA0E3E5FFE5E"&gt;Attack: Key Bruteforce Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:B446B34C-8DEC-4F74-A392-C30D1719D90D"&gt;Attack: Trust Relationship Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:9E3FC30A-B55C-4AF6-8B77-A534C6F87197"&gt;Attack: Phishing Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:AFC86927-1116-4207-B604-55FE690C298B"&gt;Checklist Item: Communication Links are Encrypted (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</content>
</guidanceItem>