<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="518f71dd-7173-4801-8a48-c0108b294809" Author="" Category="Data Access" Priority="2" Rule_Type="Guideline" Status="" Technology="Java" title="Validate All Input Passed to Database" Topic="Security" phase="Implementation" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;Applies to&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Applications written using Servlets or JSP&amp;nbsp;that interact with a database.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;What to Do&lt;/h1&gt;&lt;p&gt;Validate all input before it is passed to the database.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.&lt;/p&gt;&lt;h1&gt;When&lt;/h1&gt;&lt;p&gt;If your application uses a backend database server, then validate all input before it is passed to the database.&lt;/p&gt;&lt;h1&gt;How&lt;/h1&gt;&lt;p&gt;To properly validate input passed to database:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Identify database entry points. &lt;/strong&gt;Identify all locations within your application that interface with the database servers. Potential sources of input include: &lt;ul&gt;&lt;li&gt;URL-based parameters &lt;/li&gt;&lt;li&gt;Form-based parameters &lt;/li&gt;&lt;li&gt;Hidden fields &lt;/li&gt;&lt;li&gt;Cookies &lt;/li&gt;&lt;li&gt;Local filesystem &lt;/li&gt;&lt;li&gt;Javascript variables&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create a set of validators.&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Build a set of validators that work with the database-specific language. Using the &lt;a href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559"&gt;Validate Input for Length, Range, Format, and Type&lt;/a&gt; guideline, determine the appropriate validation at each validator.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the component.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Place the validators along the database entry points. All data should pass through the validators before transmitted to the database servers.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use type safe SQL parameters in queries. &lt;/strong&gt;Stored procedures and parameterized queries improve your application's robustness against SQL injection based attacks. Consult the &lt;a href="ruledisplay:9DF701E2-7929-4533-9DC3-368AAC4E553D"&gt;Use Type Safe SQL Parameters When Constructing SQL Queries&lt;/a&gt; and &lt;a href="ruledisplay:ADE80907-B490-4FD3-81A8-826117E25662"&gt;Use Stored Procedures&lt;/a&gt; guidelines for more details.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection. &lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;public void doGet(HttpServletRequest request,&lt;br&gt;     HttpServletResponse response) throws ServletException, IOException{&lt;br&gt;     PrintWriter out = response.getWriter();&lt;br&gt;     String query = request.getParameter("query");&lt;br&gt;     String retData = "";&lt;br&gt; &lt;br&gt;     // The application fails to validate the user-supplied&lt;br&gt;     // query before submitting it to the database server&lt;br&gt;     retData = queryDB(query);&lt;br&gt; &lt;br&gt;     ...&lt;br&gt; &lt;br&gt;     out.flush();&lt;br&gt;     out.close();&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Solution Example&lt;/h1&gt;&lt;p&gt;The following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;public void doGet(HttpServletRequest request,&lt;br&gt;     HttpServletResponse response) throws ServletException, IOException{&lt;br&gt;     PrintWriter out = response.getWriter();&lt;br&gt;     String query = request.getParameter("query");&lt;br&gt;     String retData = "";&lt;br&gt; &lt;br&gt;     // The application validates the user-supplied query&lt;br&gt;     // before submitting it to the database server&lt;br&gt;     if (validateQuery(query))&lt;br&gt;     {&lt;br&gt;          retData = queryDB(query);&lt;br&gt; &lt;br&gt;          ...&lt;br&gt; &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     out.flush();&lt;br&gt;     out.close();&lt;br&gt;}&lt;br&gt; &lt;br&gt; &lt;br&gt;public boolean validateQuery(String input){&lt;br&gt; &lt;br&gt;      // The input can be only of numeric characters&lt;br&gt;      String goodPattern = "[0-9]++";&lt;br&gt; &lt;br&gt;      Pattern p = Pattern.compile(goodPattern);&lt;br&gt;      Matcher m = p.matcher(input);&lt;br&gt; &lt;br&gt;      if(!m.matches())&lt;br&gt;      {&lt;br&gt;            return false;&lt;br&gt;      }&lt;br&gt; &lt;br&gt;      return true;&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;A tutorial on regular expressions is available at &lt;a href="http://www.regular-expressions.info/"&gt;Regular-Expressions.info&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;For more information on using regular expression in Java, see: Documentation for &lt;a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html"&gt;Class Pattern&lt;/a&gt; in Java SDK. &lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:65482066-7D67-44BD-B959-D962D527A89B"&gt;Checklist Item: All Database Input is Validated (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559"&gt;Guideline: Validate Input for Length, Range, Format, and Type (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:9DF701E2-7929-4533-9DC3-368AAC4E553D"&gt;Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:ADE80907-B490-4FD3-81A8-826117E25662"&gt;Guideline: Use Stored Procedures (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:71225A92-ECA2-481E-ADEE-EA9C222DEA43"&gt;Guideline: Validate Input from All Sources (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1D4FA7AF-33F0-40D9-9665-A31DBF3D7764"&gt;Attack: SQL Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:8515588C-661A-4962-853F-6CD6ABCD8CF6"&gt;Attack: Server-Side Code Injection Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:D47CF578-0D27-4F11-B594-C508E50982B5"&gt;Checklist Item: All Data Passed Between Native and Java Code is Validated (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</content>
</guidanceItem>