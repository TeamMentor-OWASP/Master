<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="797a213b-b83a-4acf-b535-692356993b29" Author="" Category="Authorization" Priority="2" Rule_Type="Guideline" Status="" Technology="Java" title="Perform Role-based Security Checks" Topic="Security" phase="Design" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;Applies to&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Applications written using Servlets or JSP.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;What to Do&lt;/h1&gt;&lt;p&gt;Define&amp;nbsp;the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Application roles allow multiple users to play the same role and&amp;nbsp;provides a clear way to manage the least privileges necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users.&lt;/p&gt;&lt;h1&gt;When&lt;/h1&gt;&lt;p&gt;If your application uses access control and authorizes its users to application resources, then define roles and perform role-based security checks.&lt;/p&gt;&lt;h1&gt;How&lt;/h1&gt;&lt;p&gt;To apply this concept, the security checks within an application should be executed against a user's role rather than against the actual user.&lt;/p&gt;&lt;p&gt;Use the following steps when designing the role-based security:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Understand the different types of users&lt;/strong&gt;:&amp;nbsp;List the different types of users expected for the application.&amp;nbsp;Define&amp;nbsp;how they will use&amp;nbsp;the application, which resources they will&amp;nbsp;need to&amp;nbsp;access, and any additional rules that will impact&amp;nbsp;how access will vary. Create a matrix mapping roles to resource by describing what action the role can take with each system asset. Use this matrix to identify the different types of users according to the functionality they need.&lt;/p&gt;&lt;pre&gt;Role       Actions    Access Controls    Client Accounts&lt;br&gt;--------------------------------------------------------&lt;br&gt;Manager    Connect        Always            Always&lt;br&gt;           Read           Always            Always&lt;br&gt;           Use            Always            Occasionally&lt;br&gt;           Modify         Never             Occasionally&lt;br&gt;Employee   Connect        Always            Always&lt;br&gt;           Read           Always            Always&lt;br&gt;           Use            Always            Always&lt;br&gt;           Modify         Never             Never&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Establish the roles&lt;/strong&gt;: Define in code how each role can access&amp;nbsp;each resources. There are two approaches when enforcing role-based security - programmatic and declarative:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Programmatically&lt;/strong&gt;: The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility.&lt;br&gt;&lt;br&gt;To enforce role-based security, you need to create a security policy for your application. If you implement this&amp;nbsp;approach using&amp;nbsp;Java Authentication and Authorization Service (JAAS) policies, you can execute a more focused set of security checks such as whether a user is allowed to access a particular resource or perform a specific action. When building the policy, create a role with associated permissions&amp;nbsp;for each type of user. For example, certain roles would be permitted to access the local filesystem while others would not.&lt;br&gt;&lt;br&gt;See the &lt;a href="ruledisplay:1131DE2A-C216-4397-97C8-A8D33DE8CC51"&gt;Define a Security Policy&lt;/a&gt; guideline for more information.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;grant Principal application.auth.GroupToken "administrators"&lt;br&gt;{&lt;br&gt;  permission java.security.SecurityPermission "AccessApp";&lt;br&gt;  permission java.io.FilePermission “/tmp/myapp/cache”, “read,write”;&lt;br&gt;};&lt;br&gt;grant Principal application.auth.GroupToken "users"&lt;br&gt;{&lt;br&gt;  permission java.security.SecurityPermission "AccessApp";&lt;br&gt;};&lt;/pre&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: The declarative approach to role-based security is declared within configuration files. While it doesn’t provide much flexibility in the development phase of the code, it allows easy manageability as the declarations can be modified without a recompile. By using the declarative approach, you can easily manage the security settings for&amp;nbsp;large portions of the applications without a need to change the code.&lt;br&gt;&lt;br&gt;Java applications that use declarative security rely on a deployment descriptor (e.g. web.xml). The deployment descriptor uses the following elements for role-based security:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;security-constraint&lt;/strong&gt;: Defines the access controls associated with a collection of resources as defined in the &lt;strong&gt;web-resource-collection&lt;/strong&gt; element. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;web-resource-collection&lt;/strong&gt;: Encapsulates a collection of resources that share mutual access controls. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;web-resource-name&lt;/strong&gt;: Defines the name for the collection of resources. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;url-pattern&lt;/strong&gt;: Identifies the URL of a resource that uses the access controls. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;auth-constraint&lt;/strong&gt;: Defines the group of user roles that can access the collection of resources identified by the &lt;strong&gt;web-resource-collection&lt;/strong&gt; element. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;role-name&lt;/strong&gt;: Defines the roles that can access the collection of resources. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;http-method&lt;/strong&gt;: Identifies the HTTP method upon which the access controls will be enforced. For example, your application may enforce access controls for POST requests, but not GET requests. If omitted, the access controls will apply to all HTTP methods. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;&amp;lt;!-- Application's web.xml --&amp;gt;&lt;br&gt;&amp;lt;security-constraint&amp;gt;&lt;br&gt;      &amp;lt;web-resource-collection&amp;gt;&lt;br&gt;            &amp;lt;web-resource-name&amp;gt;Admin Commands&amp;lt;/web-resource-name&amp;gt;&lt;br&gt;            &amp;lt;url-pattern&amp;gt;/admin/*&amp;lt;/url-pattern&amp;gt;&lt;br&gt;            &amp;lt;url-pattern&amp;gt;/config.do&amp;lt;/url-pattern&amp;gt;&lt;br&gt;      &amp;lt;/web-resource-collection&amp;gt;&lt;br&gt;      &amp;lt;auth-constraint&amp;gt;&lt;br&gt;            &amp;lt;role-name&amp;gt;Admin&amp;lt;/role-name&amp;gt;&lt;br&gt;      &amp;lt;/auth-constraint&amp;gt;&lt;br&gt;&amp;lt;/security-constraint&amp;gt;&lt;br&gt; &amp;lt;login-config&amp;gt;&lt;br&gt;      &amp;lt;auth-method&amp;gt;BASIC&amp;lt;/auth-method&amp;gt;&lt;br&gt;      &amp;lt;realm-name&amp;gt;Admin Realm&amp;lt;/realm-name&amp;gt;&lt;br&gt;&amp;lt;/login-config&amp;gt;&lt;br&gt; &amp;lt;!-- The following needs to be included if the application is to&lt;br&gt;     use form-based authentication&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;In web.xml:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;&amp;lt;login-config&amp;gt;&lt;br&gt;      &amp;lt;auth-method&amp;gt;FORM&amp;lt;/auth-method&amp;gt;&lt;br&gt;      &amp;lt;form-login-config&amp;gt;&lt;br&gt;            &amp;lt;form-login-page&amp;gt;/loginForm.jsp&amp;lt;/form-login-page&amp;gt;&lt;br&gt;            &amp;lt;form-error-page&amp;gt;/loginFailed.html&amp;lt;/form-error-page&amp;gt;&lt;br&gt;      &amp;lt;/form-login-config&amp;gt;&lt;br&gt;&amp;lt;/login-config&amp;gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;In loginForm.jsp:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;&amp;lt;form method="POST" action="j_security_check"&amp;gt;&lt;br&gt;&amp;lt;input type="text" name="j_username"&amp;gt;&lt;br&gt;&amp;lt;input type="password" name="j_password"&amp;gt;&lt;br&gt;&amp;lt;input type="submit" value="log in"&amp;gt;&lt;br&gt;&amp;lt;/form&amp;gt;--&amp;gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;Because declarative security asks the hosting server to handle authentication and authorization, there is the risk of disclosing connection strings, database credentials, etc.; therefore, use a JAAS LoginModule when using declarative security.&lt;br&gt;&lt;br&gt;Example using Tomcat (if you use a different environment, please consult its manual):&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;      &amp;lt;!-- $TOMCAT_HOME/conf/server.xml --&amp;gt;&lt;br&gt;      &amp;lt;!-- JAAS authentication realm --&amp;gt;&lt;br&gt;      &amp;lt;Realm className="org.apache.catalina.realm.JAASRealm"&lt;br&gt;             appName="AppLoginConfig"&lt;br&gt;             userClassNames="application.auth.GroupToken"&lt;br&gt;             roleClassNames="application.auth.GroupToken"&lt;br&gt;             useContextClassLoader="false"&lt;br&gt;             debug="99"/&amp;gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manage the users&lt;/strong&gt;: Assign the users into their respective user roles. The application should apply the security policy according to the user roles instead of the actual user.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;GroupToken groupToken = new GroupToken(groupName);&lt;br&gt;if(!subject.getPrincipals().contains(groupToken))&lt;br&gt;{&lt;br&gt;      subject.getPrincipals().add(groupToken);&lt;br&gt;}&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;For more information regarding security tokens, consult the &lt;a href="ruledisplay:A224E8C9-050B-46D0-9D10-2C91CA1F0FCA"&gt;Consider Using JAAS for Authentication&lt;/a&gt; guideline. &lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;The following segment illustrates a JAAS policy. Because the application does not enforce role-based security, it has a policy entry for each separate user; therefore, changing the users' access rights can be quite difficult as each user needs to be modified individually.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;grant Principal application.auth.UserToken "joe"&lt;br&gt;{&lt;br&gt;  permission java.security.SecurityPermission "AccessApp";&lt;br&gt;};&lt;br&gt;grant Principal application.auth.UserToken "steve"&lt;br&gt;{&lt;br&gt;  permission java.security.SecurityPermission "AccessApp";&lt;br&gt;};&lt;br&gt;grant Principal application.auth.UserToken "julie" &lt;br&gt;{&lt;br&gt;  permission java.security.SecurityPermission "AccessApp";&lt;br&gt;};&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Solution Example&lt;/h1&gt;&lt;p&gt;The following segment illustrates a JAAS policy. Because the application enforces role-based security, it has a policy entry for each group of users; therefore changing the users' access rights is easy as only the group needs to be modified.&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;grant Principal application.auth.GroupToken "users"&lt;br&gt;{&lt;br&gt;  permission java.security.SecurityPermission "AccessApp";&lt;br&gt;};&lt;/pre&gt;&lt;/blockquote&gt;&lt;h1&gt;Additional Resources&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;For more information about setting Tomcat Realms, see: &lt;a href="http://tomcat.apache.org/tomcat-7.0-doc/realm-howto.html"&gt;Tomcat 7: Realm Configuration HOW-TO&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:A224E8C9-050B-46D0-9D10-2C91CA1F0FCA"&gt;Guideline: Consider Using JAAS for Authentication (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1131DE2A-C216-4397-97C8-A8D33DE8CC51"&gt;Guideline: Define a Security Policy (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:6543475A-082B-4E98-8446-F2AFF2EF0553"&gt;Guideline: Partition Application Between Public and Private Domains (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:FC9AF70F-092C-4AC6-9B54-6793DE17B8DD"&gt;Attack: Business Rule Attack&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:152B3F11-E1F6-4885-B1CA-5FBF866E9FF2"&gt;Checklist Item: Role-based Security Checks are Performed (Java Web Application)&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;</content>
</guidanceItem>