<?xml version="1.0" encoding="utf-8"?>
<guidanceItem id="cd4cadd9-3c87-410c-a504-68b71ba8b11b" Author="" Category="Input and Data Validation" Priority="1" Rule_Type="Guideline" Status="" Technology="ASP.NET 3.5" title="Validate Input from All Sources" Topic="Security" phase="Design" xmlns="urn:microsoft:guidanceexplorer:guidanceItem">
  <content>&lt;h1&gt;What to Do&lt;/h1&gt;&lt;p&gt;Treat input from all external sources as untrusted and apply input validation techniques.&lt;/p&gt;&lt;h1&gt;Why&lt;/h1&gt;&lt;p&gt;Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities that would allow an attacker to gain unauthorized access to sensitive data or otherwise compromise an application.&lt;/p&gt;&lt;h1&gt;When&lt;/h1&gt;&lt;p&gt;Treat all input as untrusted. If you have established trust boundaries for your application, validate data every time it crosses a trust boundary.&lt;/p&gt;&lt;h1&gt;How&lt;/h1&gt;&lt;p&gt;An application can take input via various ways: file system, other software running on the server, etc. Use the following steps to establish a validation strategy:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify all sources of input:&lt;/strong&gt; Establish your application's trust boundary. The general notion is that all input not generated by your application is untrusted. Enumerate all possible sources of input and make note of the expected input from these sources. An application can have various sources of input. Each of these sources is an entry point to your application and can potentially be used to break your application's security model. Place a content specific validator at each entry point.&lt;/p&gt;&lt;p&gt;Potential sources of input in a web application typically include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;URL based parameters &lt;/li&gt;&lt;li&gt;Form based parameters &lt;/li&gt;&lt;li&gt;Hidden fields &lt;/li&gt;&lt;li&gt;Cookies &lt;/li&gt;&lt;li&gt;HTTP headers &lt;/li&gt;&lt;li&gt;Data stored on the local file system &lt;/li&gt;&lt;li&gt;Database &lt;/li&gt;&lt;li&gt;Other related services&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Understand the input that your application can handle and process:&lt;/strong&gt; Understand the specifics about your application's input. After identifying the different entry points, define the format and type of input that will be provided through each entry point. Build a validator for every format and type of expected input.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create a set of validators:&lt;/strong&gt; Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.&lt;/p&gt;&lt;p&gt;See the &lt;a href="ruledisplay:D06E3B85-CCD8-41EC-8861-36D30BBAE909"&gt;Validate Input for Length, Range, Format, and Type&lt;/a&gt; guideline for more information on constructing validation routines.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;Problem Example&lt;/h1&gt;&lt;p&gt;In the following code, a page accepts a query string parameter called &lt;strong&gt;isbn&lt;/strong&gt;. The value of this variable is used to look up a book in the database using an unmanaged middle-layer.&lt;/p&gt;&lt;pre&gt;&amp;lt;script language="C#" runat="server"&amp;gt;&lt;br&gt;    protected void Page_Load(object sender, EventArgs e)&lt;br&gt;    {&lt;br&gt;        String strIsbn = this.Request.QueryString["isbn"];&lt;br&gt;        //lookup isbn in a database using an&lt;br&gt;        //unamanged middle layer&lt;br&gt;    }&lt;br&gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;p&gt;In this example, the middle layer may be prone to malicious attacks as the value of ISBN is not validated. he length of the string is not limited, which could lead to a buffer overflow in the unmanaged middle layer, and it may not be in the correct format, which could cause a middle layer string parser to crash, allow for format string attacks, SQL injection, or a host of other issues.&lt;/p&gt;&lt;h1&gt;Solution Example&lt;/h1&gt;&lt;p&gt;In the following code, a page accepts a query string parameter called isbn. The value of this variable is used to look up a book in the database using an unmanaged middle layer. The code uses regular expressions to validate the query string string value. This ensures that the value supplied by the client is in the correct format by checking the length of the string and the characters used.&lt;/p&gt;&lt;pre&gt;&amp;lt;script language="C#" runat="server"&amp;gt;&lt;br&gt;    protected void Page_Load(object sender, EventArgs e)&lt;br&gt;    {&lt;br&gt;        String strIsbn = this.Request.QueryString["isbn"];&lt;br&gt;        if (Regex.IsMatch((strIsbn), @"(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$"))&lt;br&gt;        {&lt;br&gt;            //lookup isbn in a database using an&lt;br&gt;            //unamanged middle layer&lt;br&gt;        }&lt;br&gt;        else&lt;br&gt;        {&lt;br&gt;            //display error&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;h1&gt;Related Items&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="ruledisplay:D06E3B85-CCD8-41EC-8861-36D30BBAE909"&gt;Guideline: Validate Input for Length, Range, Format, and Type &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:897EEB0A-23C9-4699-A400-925FFC32C11E"&gt;Guideline: Filter All User-Supplied Filename and Path Input &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:1AB38C50-F31D-4CD8-89B1-CE397E6895E8"&gt;Guideline: Encode All Output Data &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:58F9B51D-794F-4CFC-B568-7F5E55DEB402"&gt;Guideline: Do Not Rely on Client-Side Validation &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:F1B74837-9A72-4745-A149-EC5D8C476EB7"&gt;Guideline: Validate All Input Passed to Database &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:C79CF3EA-F8D7-45D7-A3C5-6370411E500D"&gt;Guideline: Validate User's Login Credentials Before Processing Them &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="ruledisplay:76CC3214-9D3A-4568-B3CB-9E2AEAE560A0"&gt;Checklist Item: Input from All Sources is Validated &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;Adapted from Microsoft patterns &amp;amp; practices guidance. &lt;/p&gt;</content>
</guidanceItem>